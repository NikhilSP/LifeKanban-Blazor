@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="kanban-column @(_isColumnCollapsed ? "column-collapsed" : "")" data-column-id="life-months">
    <div class="column-header" style="border-top: 4px solid #6f42c1;">
        <div class="column-title">
            Life Visualization
        </div>
        <div class="column-actions">
            <button type="button" @onclick="ToggleColumn" title="@(_isColumnCollapsed ? "Expand" : "Collapse")">
                <span class="bi @(_isColumnCollapsed ? "bi-chevron-right" : "bi-chevron-left")"></span>
            </button>
            <button type="button" @onclick="OpenLifeSettings">
                <span class="bi bi-gear"></span>
            </button>
        </div>
    </div>
    <div class="cards-container">
        @if (_showLifeSettings)
        {
        <div class="life-settings-card">
            <div class="card-title">Life Settings</div>
            <div class="mb-3">
                <label for="birthDate" class="form-label">Birth Date</label>
                <input type="date" class="form-control" id="birthDate" @bind="_birthDate"/>
            </div>
            <div class="mb-3">
                <label for="expectedYears" class="form-label">Expected Life Span (years)</label>
                <input type="number" class="form-control" id="expectedYears" @bind="_expectedYears" min="1" max="120"/>
            </div>
            <button type="button" class="btn btn-primary" @onclick="SaveLifeSettings">Save</button>
        </div>
        }
        else
        {
        <div class="view-toggle-container mb-3">
            <div class="btn-group">
                <button type="button"
                        class="btn @(_lifeViewType == LifeViewType.Months ? "btn-primary" : "btn-outline-secondary")"
                        @onclick="() => SwitchLifeView(LifeViewType.Months)">
                    Life in Months
                </button>
                <button type="button"
                        class="btn @(_lifeViewType == LifeViewType.WeeksInYear ? "btn-primary" : "btn-outline-secondary")"
                        @onclick="() => SwitchLifeView(LifeViewType.WeeksInYear)">
                    Weeks in Year
                </button>
            </div>
        </div>

        @if (_lifeViewType == LifeViewType.Months)
        {
        <div class="life-months-chart">
            <p class="text-center mb-3">
                @(_totalMonths - _currentMonth) of @_totalMonths months left (@Math.Round(_percentComplete)% complete)
            </p>
            <div class="months-container">
                @for (int i = 0; i < _totalMonths; i++)
                {
                bool isPast = i < _currentMonth;
                bool isCurrent = i == _currentMonth;

                <div class="month-circle @(isPast ? "past-month" : "") @(isCurrent ? "current-month" : "")"
                     title="Month @(i + 1) of @_totalMonths">
                </div>
                }
            </div>
        </div>
        }
        else
        {
        <div class="weeks-in-year-chart">
            <p class="text-center mb-3">
                @(_weeksLeftInYear) of 52 weeks left in @DateTime.Now.Year
            </p>
            <div class="weeks-container">
                @for (int i = 0; i < 52; i++)
                {
                bool isPast = i < _currentWeekOfYear;
                bool isCurrent = i == _currentWeekOfYear;

                <div class="week-square @(isPast ? "past-week" : "") @(isCurrent ? "current-week" : "")"
                     title="Week @(i + 1) of 52">
                </div>
                }
            </div>
        </div>
        }
        }
    </div>
</div>

<style>
    /* Life in Months styles */
    .life-settings-card {
        background-color: var(--dark-card-bg);
        border: 1px solid var(--dark-border);
        border-radius: 8px;
        padding: 16px;
        margin-bottom: 15px;
    }

    .life-months-chart {
        background-color: var(--dark-card-bg);
        border: 1px solid var(--dark-border);
        border-radius: 8px;
        padding: 16px;
    }

    .months-container {
        display: flex;
        flex-wrap: wrap;
        gap: 4px;
        justify-content: flex-start;
    }

    .month-circle {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background-color: var(--dark-border);
        margin: 2px;
    }

    .past-month {
        background-color: #6f42c1;
    }

    .current-month {
        background-color: #fd7e14;
        animation: shape-shift 2s infinite alternate;
    }

    @@keyframes shape-shift {
        0% {
            /* Square-like shape */
            border-radius: 0%;
            clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
        }
        100% {
            /* Diamond-like shape */
            border-radius: 0%;
            clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);
        }
    }

    /* Weeks in year styling */
    .weeks-in-year-chart {
        background-color: var(--dark-card-bg);
        border: 1px solid var(--dark-border);
        border-radius: 8px;
        padding: 16px;
    }

    .weeks-container {
        display: grid;
        grid-template-columns: repeat(13, 1fr);
        gap: 4px;
    }

    .week-square {
        width: 16px;
        height: 16px;
        background-color: var(--dark-border);
        border-radius: 2px;
    }

    .past-week {
        background-color: #5cb85c; /* Green, different from the purple used for months */
    }

    .current-week {
        background-color: #fd7e14;
        animation: pulse 2s infinite alternate;
    }

    @@keyframes pulse {
        0% { opacity: 0.7; }
        100% { opacity: 1; }
    }

    /* View toggle styling */
    .view-toggle-container {
        display: flex;
        justify-content: center;
    }

    .btn-group {
        width: 100%;
    }

    .btn-group .btn {
        flex: 1;
        font-size: 12px;
        padding: 4px 8px;
    }
</style>

@code {
    [Parameter] public EventCallback<bool> OnToggle { get; set; }

    private bool _isColumnCollapsed = false;
    private bool _showLifeSettings = false;
    private DateTime _birthDate = DateTime.Now.AddYears(-30);
    private int _expectedYears = 60;
    private int _totalMonths = 720;
    private int _currentMonth = 360;
    private double _percentComplete = 50;
    private int _currentWeekOfYear = 0;
    private int _weeksLeftInYear = 0;

    private enum LifeViewType
    {
        Months,
        WeeksInYear
    }

    private LifeViewType _lifeViewType = LifeViewType.Months;

    protected override async Task OnInitializedAsync()
    {
        await LoadLifeSettings();
        await CalculateLifeMonths();
        await CalculateWeeksInYear();
    }

    private async Task LoadLifeSettings()
    {
        try
        {
            var birthDateStr = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "lifeBirthDate");
            var expectedYearsStr = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "lifeExpectedYears");
            var collapsedStr = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "lifeColumnCollapsed");
            var viewTypeStr = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "lifeViewType");

            if (!string.IsNullOrEmpty(birthDateStr) && DateTime.TryParse(birthDateStr, out DateTime savedBirthDate))
            {
                _birthDate = savedBirthDate;
            }

            if (!string.IsNullOrEmpty(expectedYearsStr) && int.TryParse(expectedYearsStr, out int savedExpectedYears))
            {
                _expectedYears = savedExpectedYears;
            }

            if (!string.IsNullOrEmpty(collapsedStr) && bool.TryParse(collapsedStr, out bool savedCollapsed))
            {
                _isColumnCollapsed = savedCollapsed;
            }

            if (!string.IsNullOrEmpty(viewTypeStr) && Enum.TryParse<LifeViewType>(viewTypeStr, out var savedViewType))
            {
                _lifeViewType = savedViewType;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading life settings: {ex.Message}");
        }
    }

    private async Task ToggleColumn()
    {
        _isColumnCollapsed = !_isColumnCollapsed;
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "lifeColumnCollapsed", _isColumnCollapsed.ToString().ToLower());
        await OnToggle.InvokeAsync(_isColumnCollapsed);
    }

    private void OpenLifeSettings()
    {
        _showLifeSettings = true;
    }

    private async Task SaveLifeSettings()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "lifeBirthDate", _birthDate.ToString("o"));
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "lifeExpectedYears", _expectedYears.ToString());

            _showLifeSettings = false;
            await CalculateLifeMonths();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving life settings: {ex.Message}");
        }
    }

    private async Task CalculateLifeMonths()
    {
        // Calculate total months based on expected years
        _totalMonths = _expectedYears * 12;

        // Calculate current month based on birth date
        var now = DateTime.Now;
        var monthsLived = ((now.Year - _birthDate.Year) * 12) + now.Month - _birthDate.Month;

        if (now.Day < _birthDate.Day)
        {
            monthsLived--; // Adjust if we haven't reached the day of month yet
        }

        _currentMonth = Math.Max(0, Math.Min(monthsLived, _totalMonths));

        // Calculate percentage complete
        _percentComplete = Math.Round((double)_currentMonth / _totalMonths * 100, 1);

        StateHasChanged();
    }

    private async Task SwitchLifeView(LifeViewType viewType)
    {
        _lifeViewType = viewType;

        if (viewType == LifeViewType.WeeksInYear)
        {
            await CalculateWeeksInYear();
        }

        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "lifeViewType", viewType.ToString());
    }

    private Task CalculateWeeksInYear()
    {
        var currentDate = DateTime.Now;

        // Calculate current week of year (approximately)
        _currentWeekOfYear = (int)Math.Floor((currentDate.DayOfYear - 1) / 7.0);

        // Calculate weeks left in year
        _weeksLeftInYear = 52 - _currentWeekOfYear;

        return Task.CompletedTask;
    }

    public void Dispose()
    {
        // Cleanup code if needed
    }
}