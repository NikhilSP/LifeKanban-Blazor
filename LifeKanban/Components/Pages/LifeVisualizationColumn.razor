@using System.Globalization
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="kanban-column @(_isColumnCollapsed ? "column-collapsed" : "")" data-column-id="life-months">
    <div class="column-header" style="border-top: 4px solid #6f42c1;">
        <div class="column-title">
            Life Visualization
        </div>
        <div class="column-actions">
            <button type="button" @onclick="ToggleColumn" title="@(_isColumnCollapsed ? "Expand" : "Collapse")">
                <span class="bi @(_isColumnCollapsed ? "bi-chevron-right" : "bi-chevron-left")"></span>
            </button>
            <button type="button" @onclick="OpenLifeSettings">
                <span class="bi bi-gear"></span>
            </button>
        </div>
    </div>

    <div class="cards-container">
        @if (_showLifeSettings)
        {
            <div class="life-settings-card">
                <div class="card-title">Life Settings</div>

                <div class="mb-3">
                    <label for="birthDate" class="form-label">Birth Date</label>
                    <input type="date" class="form-control" id="birthDate" @bind="_birthDate" />
                </div>

                <div class="mb-3">
                    <label for="expectedYears" class="form-label">Expected Life Span (years)</label>
                    <input type="number" class="form-control" id="expectedYears" @bind="_expectedYears" min="1" max="120" />
                </div>

                <button type="button" class="btn btn-primary" @onclick="SaveLifeSettings">Save</button>
            </div>
        }
        else
        {
            <div class="view-toggle-container mb-3">
                <div class="btn-group">
                    <button type="button"
                            class="btn @(_lifeViewType == LifeViewType.Months ? "btn-primary" : "btn-outline-secondary")"
                            @onclick="() => SwitchLifeView(LifeViewType.Months)">
                        Life in Months
                    </button>
                    <button type="button"
                            class="btn @(_lifeViewType == LifeViewType.WeeksInYear ? "btn-primary" : "btn-outline-secondary")"
                            @onclick="() => SwitchLifeView(LifeViewType.WeeksInYear)">
                        Weeks in Year
                    </button>
                </div>
            </div>

            @if (_lifeViewType == LifeViewType.Months)
            {
                <div class="life-months-chart">
                    <p class="text-center mb-3">
                        @(_totalMonths - _monthsLived) of @_totalMonths months left (@Math.Round(_percentComplete)% complete)
                    </p>

                    <div class="months-container">
                        @for (int i = 0; i < _totalMonths; i++)
                        {
                            bool isPast    = i < _currentMonthIdx;
                            bool isCurrent = i == _currentMonthIdx;

                            <div class="month-circle @(isPast ? "past-month" : "") @(isCurrent ? "current-month" : "")"
                                 title="Month @(i + 1) of @_totalMonths">
                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="weeks-in-year-chart">
                    <p class="text-center mb-3">
                        @_weeksLeftInYear of @_weeksInYear weeks left in @DateTime.Now.Year
                    </p>

                    <div class="weeks-container">
                        @for (int i = 0; i < _weeksInYear; i++)
                        {
                            bool isPast    = i < _currentWeekIdx;
                            bool isCurrent = i == _currentWeekIdx;

                            <div class="week-square @(isPast ? "past-week" : "") @(isCurrent ? "current-week" : "")"
                                 title="Week @(i + 1) of @_weeksInYear">
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>

<style>
    /* Life in Months styles */
    .life-settings-card {
        background-color: var(--dark-card-bg);
        border: 1px solid var(--dark-border);
        border-radius: 8px;
        padding: 16px;
        margin-bottom: 15px;
    }

    .life-months-chart {
        background-color: var(--dark-card-bg);
        border: 1px solid var(--dark-border);
        border-radius: 8px;
        padding: 16px;
    }

    .months-container {
        display: flex;
        flex-wrap: wrap;
        gap: 4px;
        justify-content: flex-start;
    }

    .month-circle {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background-color: var(--dark-border);
        margin: 2px;
    }

    .past-month {
        background-color: #6f42c1;
    }

    .current-month {
        background-color: #fd7e14;
        animation: shape-shift 2s infinite alternate;
    }

    @@keyframes shape-shift {
        0% {
            /* Square-like shape */
            border-radius: 0%;
            clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
        }
        100% {
            /* Diamond-like shape */
            border-radius: 0%;
            clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);
        }
    }

    /* Weeks in year styling */
    .weeks-in-year-chart {
        background-color: var(--dark-card-bg);
        border: 1px solid var(--dark-border);
        border-radius: 8px;
        padding: 16px;
    }

    .weeks-container {
        display: grid;
        grid-template-columns: repeat(13, 1fr);
        gap: 4px;
    }

    .week-square {
        width: 16px;
        height: 16px;
        background-color: var(--dark-border);
        border-radius: 2px;
    }

    .past-week {
        background-color: #5cb85c; /* Green, different from the purple used for months */
    }

    .current-week {
        background-color: #fd7e14;
        animation: pulse 2s infinite alternate;
    }

    @@keyframes pulse {
        0% { opacity: 0.7; }
        100% { opacity: 1; }
    }

    /* View toggle styling */
    .view-toggle-container {
        display: flex;
        justify-content: center;
    }

    .btn-group {
        width: 100%;
    }

    .btn-group .btn {
        flex: 1;
        font-size: 12px;
        padding: 4px 8px;
    }
</style>

@code {
    [Parameter] public EventCallback<bool> OnToggle { get; set; }

    private bool       _isColumnCollapsed = false;
    private bool       _showLifeSettings  = false;

    private DateTime   _birthDate         = DateTime.Now.AddYears(-30);
    private int        _expectedYears     = 60;

    // --- Months view fields
    private int    _totalMonths     = 0;
    private int    _monthsLived     = 0; // completed months
    private int    _currentMonthIdx = 0; // 0-based for UI
    private double _percentComplete = 0;

    // --- Weeks view fields
    private int _weeksInYear     = 52;
    private int _currentWeekIdx  = 0; // 0-based for UI
    private int _weeksLeftInYear = 0;

    private enum LifeViewType { Months, WeeksInYear }
    private LifeViewType _lifeViewType = LifeViewType.Months;

    protected override async Task OnInitializedAsync()
    {
        await LoadLifeSettings();
        CalculateLifeMonths();
        CalculateWeeksInYear();
    }

    private async Task LoadLifeSettings()
    {
        try
        {
            var birthDateStr   = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "lifeBirthDate");
            var expectedYearsStr = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "lifeExpectedYears");
            var collapsedStr   = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "lifeColumnCollapsed");
            var viewTypeStr    = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "lifeViewType");

            if (!string.IsNullOrEmpty(birthDateStr) && DateTime.TryParse(birthDateStr, out var savedBirthDate))
                _birthDate = savedBirthDate;

            if (!string.IsNullOrEmpty(expectedYearsStr) && int.TryParse(expectedYearsStr, out var savedYears))
                _expectedYears = savedYears;

            if (!string.IsNullOrEmpty(collapsedStr) && bool.TryParse(collapsedStr, out var savedCollapsed))
                _isColumnCollapsed = savedCollapsed;

            if (!string.IsNullOrEmpty(viewTypeStr)
                && Enum.TryParse(viewTypeStr, ignoreCase: true, out LifeViewType savedView))
                _lifeViewType = savedView;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading life settings: {ex.Message}");
        }
    }

    private async Task SaveLifeSettings()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "lifeBirthDate",      _birthDate.ToString("o"));
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "lifeExpectedYears", _expectedYears.ToString());

            _showLifeSettings = false;
            CalculateLifeMonths();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving life settings: {ex.Message}");
        }
    }

    private async Task ToggleColumn()
    {
        _isColumnCollapsed = !_isColumnCollapsed;
        await JSRuntime.InvokeVoidAsync("localStorage.setItem",
                                        "lifeColumnCollapsed",
                                        _isColumnCollapsed.ToString().ToLower());
        await OnToggle.InvokeAsync(_isColumnCollapsed);
    }

    private void OpenLifeSettings() => _showLifeSettings = true;

    private async Task SwitchLifeView(LifeViewType viewType)
    {
        _lifeViewType = viewType;
        if (viewType == LifeViewType.WeeksInYear)
            CalculateWeeksInYear();

        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "lifeViewType", viewType.ToString());
    }

    private void CalculateLifeMonths()
    {
        _totalMonths = _expectedYears * 12;

        var now = DateTime.Now;
        int monthsLived = (now.Year - _birthDate.Year) * 12
                        + now.Month - _birthDate.Month
                        - (now.Day < _birthDate.Day ? 1 : 0);

        _monthsLived     = Math.Clamp(monthsLived, 0, _totalMonths);
        _currentMonthIdx = Math.Clamp(_monthsLived - 1, 0, _totalMonths - 1);
        _percentComplete = _totalMonths == 0
            ? 0
            : Math.Round(_monthsLived / (double)_totalMonths * 100, 1);

        StateHasChanged();
    }

    private void CalculateWeeksInYear()
    {
        var now               = DateTime.Now;
        int weekOneBased      = ISOWeek.GetWeekOfYear(now);          // 1-based
        _weeksInYear          = ISOWeek.GetWeeksInYear(now.Year);    // 52 or 53
        _currentWeekIdx       = weekOneBased - 1;                    // 0-based for UI
        _weeksLeftInYear      = _weeksInYear - weekOneBased;         // exclude current week

        StateHasChanged();
    }
    
    public void Dispose()
    {
        // No unmanaged resources yet
    }
}
