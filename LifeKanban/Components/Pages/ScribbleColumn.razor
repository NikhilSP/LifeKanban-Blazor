@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="kanban-column @(_isColumnCollapsed ? "column-collapsed" : "")" data-column-id="scribble">
    <div class="column-header" style="border-top: 4px solid #5cb85c;">
        <div class="column-title">
            Scribble
        </div>
        <div class="column-actions">
            <button type="button" @onclick="ToggleColumn" title="@(_isColumnCollapsed ? "Expand" : "Collapse")">
                <span class="bi @(_isColumnCollapsed ? "bi-chevron-right" : "bi-chevron-left")"></span>
            </button>
        </div>
    </div>
    <div class="cards-container">
        <div class="scribble-container">
            <textarea
                class="scribble-textarea"
                placeholder="Type your thoughts here..."
                @bind="_scribbleText"
                @bind:event="oninput"
                spellcheck="true"
                @onblur="SaveScribble">
            </textarea>
            @if (_showScribbleSaved)
            {
                <div class="save-indicator">
                    <span class="bi bi-check-circle"></span> Saved
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback<bool> OnToggle { get; set; }

    private bool _isColumnCollapsed = false;
    private string _scribbleText = string.Empty;
    private bool _showScribbleSaved = false;
    private Timer? _saveIndicatorTimer;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadScribble();
    }

    private async Task LoadScribble()
    {
        try
        {
            var savedText = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "scribbleText");
            var collapsedState = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "scribbleColumnCollapsed");

            if (!string.IsNullOrEmpty(savedText))
            {
                _scribbleText = savedText;
            }

            if (!string.IsNullOrEmpty(collapsedState) && bool.TryParse(collapsedState, out bool isCollapsed))
            {
                _isColumnCollapsed = isCollapsed;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading scribble: {ex.Message}");
        }
    }

    private async Task ToggleColumn()
    {
        _isColumnCollapsed = !_isColumnCollapsed;
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "scribbleColumnCollapsed", _isColumnCollapsed.ToString().ToLower());
        await OnToggle.InvokeAsync(_isColumnCollapsed);
    }

    private async Task SaveScribble()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "scribbleText", _scribbleText);

            _showScribbleSaved = true;

            _saveIndicatorTimer?.Dispose();

            _saveIndicatorTimer = new Timer(async _ =>
            {
                await InvokeAsync(() =>
                {
                    _showScribbleSaved = false;
                    StateHasChanged();
                });
            }, null, 2000, Timeout.Infinite);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving scribble: {ex.Message}");
        }
    }

    public void Dispose()
    {
        _saveIndicatorTimer?.Dispose();
    }
}