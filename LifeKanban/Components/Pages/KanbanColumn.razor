@inject IJSRuntime JSRuntime

<div class="kanban-column @(IsCollapsed ? "column-collapsed" : "") @CssClass" data-column-id="@ColumnId">
    <div class="column-header" style="@HeaderStyle">
        <div class="column-title">
            @Title
            <div class="column-count">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor">
                    <path d="M8 9.5a1.5 1.5 0 100-3 1.5 1.5 0 000 3z"/>
                    <path fill-rule="evenodd" d="M8 0a8 8 0 100 16A8 8 0 008 0zM1.5 8a6.5 6.5 0 1113 0 6.5 6.5 0 01-13 0z"/>
                </svg>
                @ItemCount
            </div>
        </div>
        <div class="column-actions">
            <button type="button" @onclick="ToggleCollapse" title="@(IsCollapsed ? "Expand" : "Collapse")">
                <span class="bi @(IsCollapsed ? "bi-chevron-right" : "bi-chevron-left")"></span>
            </button>
            @if (AllowAdd)
            {
                <button type="button" @onclick="OnAddClick">
                    <span class="bi bi-plus"></span>
                </button>
            }
        </div>
    </div>
    <div class="cards-container"
         dropzone="move"
         ondragenter="event.preventDefault();"
         ondragover="return window.kanbanInterop.handleDragOver(event, @ColumnId)"
         @ondrop="HandleDrop">
        @ChildContent
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; }
    [Parameter] public int ColumnId { get; set; }
    [Parameter] public int ItemCount { get; set; }
    [Parameter] public bool AllowAdd { get; set; } = true;
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string HeaderStyle { get; set; } = "";
    [Parameter] public string CssClass { get; set; } = "";
    [Parameter] public bool IsCollapsed { get; set; }
    [Parameter] public EventCallback<int> OnAdd { get; set; }
    [Parameter] public EventCallback<int> OnDrop { get; set; }
    [Parameter] public EventCallback<bool> OnCollapseToggle { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Load collapsed state from local storage
        var key = $"column_{ColumnId}_collapsed";
        var state = await JSRuntime.InvokeAsync<string>("localStorage.getItem", key);
        IsCollapsed = state == "true";
    }

    private async Task ToggleCollapse()
    {
        IsCollapsed = !IsCollapsed;
        
        // Save state to local storage
        var key = $"column_{ColumnId}_collapsed";
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", key, IsCollapsed.ToString().ToLower());
        
        await OnCollapseToggle.InvokeAsync(IsCollapsed);
    }

    private async Task OnAddClick()
    {
        await OnAdd.InvokeAsync(ColumnId);
    }

    private async Task HandleDrop()
    {
        await OnDrop.InvokeAsync(ColumnId);
    }
}