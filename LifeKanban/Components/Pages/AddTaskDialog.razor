@using LifeKanban.Client
@using LifeKanban.Model
@inject ProjectsClient Client

<div class="modal fade show gitlab-modal" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Title</h4>
                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
            </div>
            <div class="modal-body">
                <EditForm Model="@ProjectTaskItem" FormName="AddProject">
                    <div class="mb-3">
                        <label for="taskName" class="form-label">Title</label>
                        <InputText id="taskName" class="form-control" @bind-Value="ProjectTaskItem.title"/>
                    </div>
                    <div class="mb-3">
                        <label for="Description" class="form-label">Description</label>
                        <InputTextArea id="Description" class="form-control" @bind-Value="ProjectTaskItem.description" rows="3"/>
                    </div>
                    <div class="mb-3">
                        <label for="milestone" class="form-label">Milestone</label>
                        <select id="milestone" class="form-control" @onchange="HandleMilestoneChange">
                            <option value="">-- Select Milestone --</option>
                            @foreach (var milestone in ProjectItem.milestones)
                            {
                                @if (CurrentTaskItem?.milestone?.id == milestone.id)
                                {
                                    <option value="@milestone.id" selected>@milestone.name</option>
                                }
                                else
                                {
                                    <option value="@milestone.id">@milestone.name</option>
                                }
                            }
                        </select>
                    </div>

                    <!-- New subtasks section -->
                    <div class="mb-3">
                        <label class="form-label">Subtasks</label>
                        <div class="subtasks-container">
                            @foreach (var subtask in ProjectTaskItem.subtasks)
                            {
                                <div class="subtask-item d-flex align-items-center mb-2">
                                    <div class="form-check d-flex align-items-center flex-grow-1">
                                        <input type="checkbox" class="form-check-input" checked="@subtask.isCompleted"
                                               @onchange="e => subtask.isCompleted = (bool)e.Value"/>
                                        <input class="form-control form-control-sm ms-2" value="@subtask.title"
                                               @onchange="e => subtask.title = e.Value.ToString()"/>
                                    </div>
                                    <button type="button" class="btn btn-sm" style="color: var(--gl-text-secondary);"
                                            @onclick="() => RemoveSubtask(subtask)">
                                        <span class="bi bi-trash"></span>
                                    </button>
                                </div>
                            }

                            <div class="d-flex mt-2">
                                <input class="form-control form-control-sm" @bind="newSubtaskTitle"
                                       placeholder="New subtask..." @onkeydown="@HandleSubtaskKeyDown"/>
                                <button type="button" class="btn btn-sm ms-2" @onclick="AddNewSubtask">
                                    <span class="bi bi-plus"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </EditForm>

                @if (!string.IsNullOrEmpty(debugMessage))
                {
                    <div class="alert mt-3">
                        @debugMessage
                    </div>
                }
            </div>
            <div class="modal-footer">
                @switch (DialogType)
                {
                    case ModalDialogType.Ok:
                        <button type="button" class="btn btn-primary" @onclick="SafeModalOk">@_actionButtonString</button>
                        break;
                    case ModalDialogType.OkCancel:
                        <button type="button" class="btn btn-primary" @onclick="SafeModalOk">@_actionButtonString</button>
                        break;
                    case ModalDialogType.DeleteCancel:
                        <button type="button" class="btn btn-danger" @onclick="SafeModalOk">@_actionButtonString</button>
                        @if (!_inEditMode)
                        {
                            <button type="button" class="btn btn-danger" @onclick="SafeMultipleModalOk">Add Multiple Task</button>
                            <div class="ms-1 help-icon" title="Add a task and keep the dialog open to add more tasks. Milestone selection will be preserved.">
                                <span class="bi bi-question-circle"></span>
                            </div>
                        }

                        break;
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string debugMessage;
    private string newSubtaskTitle = string.Empty;

    private void HandleMilestoneChange(ChangeEventArgs e)
    {
        try
        {
            var selectedId = e.Value.ToString();
            debugMessage = $"Selected milestone ID: {selectedId}";

            if (string.IsNullOrEmpty(selectedId))
            {
                ProjectTaskItem.milestone = null;
                return;
            }

            var milestone = ProjectItem.milestones.First(x => x.id.ToString() == selectedId);
            ProjectTaskItem.milestone = milestone;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            debugMessage = $"Error: {ex.Message}";
            StateHasChanged();
        }
    }

    private void AddNewSubtask()
    {
        if (!string.IsNullOrWhiteSpace(newSubtaskTitle))
        {
            ProjectTaskItem.subtasks.Add(new SubTaskItem
            {
                id = Guid.NewGuid(),
                title = newSubtaskTitle,
                isCompleted = false
            });
            newSubtaskTitle = string.Empty;
            StateHasChanged();
        }
    }

    private void RemoveSubtask(SubTaskItem subtask)
    {
        ProjectTaskItem.subtasks.Remove(subtask);
        StateHasChanged();
    }

    private void HandleSubtaskKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            AddNewSubtask();
        }
    }

    private void SafeModalOk()
    {
        try
        {
            debugMessage = "Add Task button clicked";
            StateHasChanged();
            ModalOk();
        }
        catch (Exception ex)
        {
            debugMessage = $"Error in ModalOk: {ex.Message}";
            StateHasChanged();
        }
    }

    private void SafeMultipleModalOk()
    {
        try
        {
            debugMessage = "Add Multiple Task button clicked";
            StateHasChanged();
            MultipleModalOk();
        }
        catch (Exception ex)
        {
            debugMessage = $"Error in ModalOk: {ex.Message}";
            StateHasChanged();
        }
    }

    [SupplyParameterFromForm] private ProjectTaskItem ProjectTaskItem { get; set; } = new();

    [Parameter] public string Title { get; set; } = "Add Task Details";

    [Parameter] public string Text { get; set; }

    [Parameter] public ProjectItem ProjectItem { get; set; }

    [Parameter] public ProjectTaskItem? CurrentTaskItem { get; set; }

    [Parameter] public EventCallback<bool> OnClose { get; set; }

    [Parameter] public ModalDialogType DialogType { get; set; }

    [Parameter] public EventCallback<ProjectTaskItem> OnItemSelected { get; set; }

    private bool _inEditMode = false;
    private string _actionButtonString = "Add Task";

    protected override void OnInitialized()
    {
        if (CurrentTaskItem is not null)
        {
            _inEditMode = true;
            Title = "Edit Task Details";
            _actionButtonString = "Save Task";
            ProjectTaskItem = CurrentTaskItem;
        }
    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private async Task<Task> ModalOk()
    {
        Guid? result;

        if (_inEditMode)
        {
            result = await Client.UpdateTask(ProjectTaskItem, ProjectItem.id);
        }
        else
        {
            var columnPositions = ProjectItem.tasks.Select(x => x.columnPosition).ToList();

            if (columnPositions.Any())
            {
                var newColumnPosition = columnPositions.Max();
                ProjectTaskItem.columnPosition = newColumnPosition + 10;
            }

            result = await Client.AddTask(ProjectTaskItem, ProjectItem.id);
        }

        if (result is not null)
        {
            await OnItemSelected.InvokeAsync(ProjectTaskItem);
        }


        return OnClose.InvokeAsync(true);
    }

    private async Task<Task> MultipleModalOk()
    {
        Guid? result;

        if (_inEditMode)
        {
            return OnClose.InvokeAsync(true);
        }

        var columnPositions = ProjectItem.tasks.Select(x => x.columnPosition).ToList();

        if (columnPositions.Any())
        {
            var newColumnPosition = columnPositions.Max();
            ProjectTaskItem.columnPosition = newColumnPosition + 10;
        }

        result = await Client.AddTask(ProjectTaskItem, ProjectItem.id);

        if (result is not null)
        {
            await OnItemSelected.InvokeAsync(ProjectTaskItem);
            
            var oldMilestone = ProjectTaskItem.milestone;
            ProjectTaskItem = new();
            ProjectTaskItem.milestone = oldMilestone;
            
            return Task.CompletedTask;
        }

        return OnClose.InvokeAsync(true);
    }

    public enum ModalDialogType
    {
        Ok,
        OkCancel,
        DeleteCancel
    }

}