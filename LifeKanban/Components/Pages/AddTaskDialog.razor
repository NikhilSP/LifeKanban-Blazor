@using LifeKanban.Client
@using LifeKanban.Model
@inject ProjectsClient Client

<div class="modal fade show gitlab-modal" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Title</h4>
                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
            </div>
            <div class="modal-body">
                <EditForm Model="@ProjectTaskItem" FormName="AddProject" OnValidSubmit="@ValidateAndSubmit">
                    <DataAnnotationsValidator/>

                    <div class="mb-3">
                        <label for="taskName" class="form-label required">Title</label>
                        <InputText id="taskName" class="form-control" @bind-Value="ProjectTaskItem.title" spellcheck="true"/>
                        <ValidationMessage For="@(() => ProjectTaskItem.title)" class="text-danger"/>
                        @if (!string.IsNullOrEmpty(duplicateError))
                        {
                            <div class="text-danger mt-1">@duplicateError</div>
                        }
                    </div>

                    <div class="mb-3">
                        <label for="Description" class="form-label">Description</label>
                        <InputTextArea id="Description" class="form-control" @bind-Value="ProjectTaskItem.description" rows="3" spellcheck="true"/>
                    </div>

                    <div class="mb-3">
                        <label for="milestone" class="form-label">Milestone</label>
                        <select id="milestone" class="form-control" value="@(ProjectTaskItem.milestone?.id.ToString() ?? "")" @onchange="HandleMilestoneChange">
                            <option value="">-- Select Milestone --</option>
                            @foreach (var milestone in ProjectItem.milestones)
                            {
                                <option value="@milestone.id" selected="@(ProjectTaskItem.milestone?.id == milestone.id)">@milestone.name</option>
                            }
                        </select>
                    </div>

                    <!-- Subtasks section -->
                    <div class="mb-3">
                        <label class="form-label">Subtasks</label>
                        <div class="subtasks-container">
                            @if (ProjectTaskItem.subtasks.Any())
                            {
                                var subtasks = ProjectTaskItem.subtasks.OrderBy(s => s.position).ToList();
                                @for(int subtaskIndex=0;subtaskIndex<subtasks.Count;subtaskIndex++)
                                {
                                    var subtask = subtasks[subtaskIndex];
                                    <div class="subtask-item d-flex align-items-center mb-2">
                                        <div class="form-check d-flex align-items-center flex-grow-1">
                                            <input type="checkbox" class="form-check-input" checked="@subtask.isCompleted"
                                                   @onchange="e => subtask.isCompleted = (bool)e.Value"/>
                                            <input class="form-control form-control-sm ms-2" value="@subtask.title"
                                                   spellcheck="true"
                                                   @onchange="e => UpdateSubtaskTitle(subtask, e.Value.ToString())"/>
                                        </div>
                                        <div class="subtask-actions">
                                            <button type="button" class="btn btn-sm" style="color: var(--gl-text-secondary);"
                                                    @onclick="() => MoveSubtaskUp(subtask)"
                                                    disabled="@(subtaskIndex == 0)"
                                                    title="Move up">
                                                <span class="bi bi-arrow-up"></span>
                                            </button>
                                            <button type="button" class="btn btn-sm" style="color: var(--gl-text-secondary);"
                                                    @onclick="() => MoveSubtaskDown(subtask)"
                                                    disabled="@(subtaskIndex == ProjectTaskItem.subtasks.Count - 1)"
                                                    title="Move down">
                                                <span class="bi bi-arrow-down"></span>
                                            </button>
                                            <button type="button" class="btn btn-sm" style="color: var(--gl-text-secondary);"
                                                    @onclick="() => RemoveSubtask(subtask)"
                                                    title="Delete">
                                                <span class="bi bi-trash"></span>
                                            </button>
                                        </div>
                                    </div>
                                    @if (subtaskValidationErrors.ContainsKey(subtask.id))
                                    {
                                        <div class="text-danger small mb-2 ms-4">@subtaskValidationErrors[subtask.id]</div>
                                    }
                                }
                            }

                            <div class="d-flex mt-2">
                                <input class="form-control form-control-sm @(string.IsNullOrWhiteSpace(newSubtaskValidationMessage) ? "" : "is-invalid")"
                                       @bind="newSubtaskTitle"
                                       spellcheck="true"
                                       @bind:event="oninput"
                                       placeholder="New subtask..." @onkeydown="@HandleSubtaskKeyDown"/>
                                <button type="button" class="btn btn-sm ms-2" @onclick="AddNewSubtask">
                                    <span class="bi bi-plus"></span>
                                </button>
                            </div>
                            @if (!string.IsNullOrWhiteSpace(newSubtaskValidationMessage))
                            {
                                <div class="text-danger small mt-1">@newSubtaskValidationMessage</div>
                            }
                        </div>
                    </div>
                </EditForm>

                @if (showNotification)
                {
                    <div class="alert mt-3 @notificationClass">
                        <strong>@notificationTitle</strong> @notificationMessage
                        <button type="button" class="btn-close float-end" @onclick="CloseNotification"></button>
                    </div>
                }
            </div>
            <div class="modal-footer">
                @switch (DialogType)
                {
                    case ModalDialogType.Ok:
                        <button type="button" class="btn btn-primary" @onclick="ValidateAndSubmit">@_actionButtonString</button>
                        break;
                    case ModalDialogType.OkCancel:
                        <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="ValidateAndSubmit">@_actionButtonString</button>
                        break;
                    case ModalDialogType.DeleteCancel:
                        <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="ValidateAndSubmit">@_actionButtonString</button>
                        @if (!_inEditMode)
                        {
                            <button type="button" class="btn btn-primary" @onclick="ValidateAndSubmitMultiple">Add Multiple Tasks</button>
                            <div class="ms-1 help-icon" title="Add a task and keep the dialog open to add more tasks. Milestone selection will be preserved.">
                                <span class="bi bi-question-circle"></span>
                            </div>
                        }

                        break;
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string newSubtaskTitle = string.Empty;
    private string newSubtaskValidationMessage = string.Empty;
    private Dictionary<Guid, string> subtaskValidationErrors = new Dictionary<Guid, string>();
    private string duplicateError = string.Empty;

    // Notification properties
    private bool showNotification = false;
    private string notificationMessage = string.Empty;
    private string notificationTitle = string.Empty;
    private string notificationClass = string.Empty;

    private void HandleMilestoneChange(ChangeEventArgs e)
    {
        try
        {
            var selectedId = e.Value.ToString();

            if (string.IsNullOrEmpty(selectedId))
            {
                ProjectTaskItem.milestone = null;
                return;
            }

            var milestone = ProjectItem.milestones.First(x => x.id.ToString() == selectedId);
            ProjectTaskItem.milestone = milestone;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowErrorNotification("Error", $"Error selecting milestone: {ex.Message}");
            StateHasChanged();
        }
    }

    private void AddNewSubtask()
    {
        newSubtaskValidationMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(newSubtaskTitle))
        {
            newSubtaskValidationMessage = "Subtask title is required";
            return;
        }

        // Calculate the next position value (max position + 10)
        int nextPosition = 10;
        if (ProjectTaskItem.subtasks.Any())
        {
            nextPosition = ProjectTaskItem.subtasks.Max(s => s.position) + 10;
        }

        ProjectTaskItem.subtasks.Add(new SubTaskItem
        {
            id = Guid.NewGuid(),
            title = newSubtaskTitle,
            isCompleted = false,
            position = nextPosition // Assign the calculated position
        });
        newSubtaskTitle = string.Empty;
        StateHasChanged();
    }

    private void UpdateSubtaskTitle(SubTaskItem subtask, string newTitle)
    {
        if (string.IsNullOrWhiteSpace(newTitle))
        {
            subtaskValidationErrors[subtask.id] = "Subtask title is required";
        }
        else
        {
            subtask.title = newTitle;
            if (subtaskValidationErrors.ContainsKey(subtask.id))
            {
                subtaskValidationErrors.Remove(subtask.id);
            }
        }
    }

    private void RemoveSubtask(SubTaskItem subtask)
    {
        ProjectTaskItem.subtasks.Remove(subtask);
        if (subtaskValidationErrors.ContainsKey(subtask.id))
        {
            subtaskValidationErrors.Remove(subtask.id);
        }

        StateHasChanged();
    }

    private void HandleSubtaskKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            AddNewSubtask();
        }
    }

    private async Task ValidateAndSubmit()
    {
        if (ValidateTask())
        {
            await SafeModalOk();
        }
    }

    private async Task ValidateAndSubmitMultiple()
    {
        if (ValidateTask())
        {
            await SafeMultipleModalOk();
        }
    }

    private bool ValidateTask()
    {
        // Clear previous errors
        duplicateError = string.Empty;

        if (!string.IsNullOrWhiteSpace(newSubtaskTitle))
        {
            // Automatically add the pending subtask
            ProjectTaskItem.subtasks.Add(new SubTaskItem
            {
                id = Guid.NewGuid(),
                title = newSubtaskTitle,
                isCompleted = false
            });

            // Clear the input field
            newSubtaskTitle = string.Empty;
        }

        // Validate task title
        if (string.IsNullOrWhiteSpace(ProjectTaskItem.title))
        {
            ShowErrorNotification("Validation Error", "Task title is required.");
            return false;
        }

        // Check for duplicate task title
        // Skip duplicate check if we're in edit mode and the title hasn't changed
        if (!_inEditMode || (CurrentTaskItem != null && ProjectTaskItem.title != CurrentTaskItem.title))
        {
            bool isDuplicate = Client.IsTaskTitleDuplicate(ProjectTaskItem.title, ProjectItem);
            if (isDuplicate)
            {
                duplicateError = $"A task with the title '{ProjectTaskItem.title}' already exists in this project.";
                return false;
            }
        }

        // Validate subtasks
        bool hasSubtaskErrors = false;
        subtaskValidationErrors.Clear();

        foreach (var subtask in ProjectTaskItem.subtasks)
        {
            if (string.IsNullOrWhiteSpace(subtask.title))
            {
                subtaskValidationErrors[subtask.id] = "Subtask title is required";
                hasSubtaskErrors = true;
            }
        }

        if (hasSubtaskErrors)
        {
            ShowErrorNotification("Validation Error", "Please fix the errors in subtasks before submitting.");
            return false;
        }

        return true;
    }

    private void ShowInfoNotification(string title, string message)
    {
        notificationTitle = title;
        notificationMessage = message;
        notificationClass = "alert-info";
        showNotification = true;

        // Auto-hide after 3 seconds
        var timer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(() =>
            {
                showNotification = false;
                StateHasChanged();
            });
        }, null, 3000, Timeout.Infinite);
    }

    private async Task SafeModalOk()
    {
        try
        {
            await ModalOk();
        }
        catch (Exception ex)
        {
            ShowErrorNotification("Error", $"Error saving task: {ex.Message}");
            StateHasChanged();
        }
    }

    private async Task SafeMultipleModalOk()
    {
        try
        {
            await MultipleModalOk();
        }
        catch (Exception ex)
        {
            ShowErrorNotification("Error", $"Error saving task: {ex.Message}");
            StateHasChanged();
        }
    }

    [SupplyParameterFromForm] private ProjectTaskItem ProjectTaskItem { get; set; } = new();

    [Parameter] public string Title { get; set; } = "Add Task Details";

    [Parameter] public string Text { get; set; }

    [Parameter] public ProjectItem ProjectItem { get; set; }

    [Parameter] public ProjectTaskItem? CurrentTaskItem { get; set; }

    [Parameter] public EventCallback<bool> OnClose { get; set; }

    [Parameter] public ModalDialogType DialogType { get; set; }

    [Parameter] public EventCallback<ProjectTaskItem> OnItemSelected { get; set; }

    private bool _inEditMode = false;
    private string _actionButtonString = "Add Task";

    protected override void OnInitialized()
    {
        if (CurrentTaskItem is not null)
        {
            _inEditMode = true;
            Title = "Edit Task Details";
            _actionButtonString = "Save Task";
            ProjectTaskItem = CurrentTaskItem;
        }
        
        if(CurrentTaskItem is not null && string.IsNullOrWhiteSpace(CurrentTaskItem.title) && !string.IsNullOrWhiteSpace(CurrentTaskItem.status))
        {
            _inEditMode = false;
            Title = "Add Task Details";
            _actionButtonString = "Add Task";
            ProjectTaskItem = CurrentTaskItem;
        }
    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private async Task<Task> ModalOk()
    {
        Guid? result;

        if (_inEditMode)
        {
            result = await Client.UpdateTask(ProjectTaskItem, ProjectItem.id);
            if (result is not null)
            {
                ShowSuccessNotification("Success", "Task updated successfully.");
            }
        }
        else
        {
            var columnPositions = ProjectItem.tasks.Select(x => x.columnPosition).ToList();

            if (columnPositions.Any())
            {
                var newColumnPosition = columnPositions.Max();
                ProjectTaskItem.columnPosition = newColumnPosition + 10;
            }

            result = await Client.AddTask(ProjectTaskItem, ProjectItem.id);
            if (result is not null)
            {
                ShowSuccessNotification("Success", "Task added successfully.");
            }
        }

        if (result is not null)
        {
            await OnItemSelected.InvokeAsync(ProjectTaskItem);
        }
        else
        {
            ShowErrorNotification("Error", _inEditMode ? "Failed to update task." : "Failed to add task.");
        }

        return OnClose.InvokeAsync(true);
    }

    private async Task<Task> MultipleModalOk()
    {
        Guid? result;

        if (_inEditMode)
        {
            return OnClose.InvokeAsync(true);
        }

        var columnPositions = ProjectItem.tasks.Select(x => x.columnPosition).ToList();

        if (columnPositions.Any())
        {
            var newColumnPosition = columnPositions.Max();
            ProjectTaskItem.columnPosition = newColumnPosition + 10;
        }

        result = await Client.AddTask(ProjectTaskItem, ProjectItem.id);

        if (result is not null)
        {
            ShowSuccessNotification("Success", "Task added successfully. You can add another task.");
            await OnItemSelected.InvokeAsync(ProjectTaskItem);

            // Store the old milestone for reuse
            var oldMilestone = ProjectTaskItem.milestone;

            // Create a completely new task instead of modifying the existing one
            ProjectTaskItem = new ProjectTaskItem
            {
                title = "",
                description = "",
                status = "To Do",
                milestone = oldMilestone,
                subtasks = new List<SubTaskItem>()
            };

            // Clear duplicate error when starting a new task
            duplicateError = string.Empty;

            StateHasChanged();
            // Return Task.CompletedTask to keep the dialog open
            return Task.CompletedTask;
        }
        else
        {
            ShowErrorNotification("Error", "Failed to add task.");
        }

        return OnClose.InvokeAsync(true);
    }

    private void ShowSuccessNotification(string title, string message)
    {
        notificationTitle = title;
        notificationMessage = message;
        notificationClass = "alert-success";
        showNotification = true;

        // Auto-hide after 3 seconds
        var timer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(() =>
            {
                showNotification = false;
                StateHasChanged();
            });
        }, null, 3000, Timeout.Infinite);
    }

    private void ShowErrorNotification(string title, string message)
    {
        notificationTitle = title;
        notificationMessage = message;
        notificationClass = "alert-danger";
        showNotification = true;
    }

    private void CloseNotification()
    {
        showNotification = false;
    }

    public enum ModalDialogType
    {
        Ok,
        OkCancel,
        DeleteCancel
    }

    private void MoveSubtaskUp(SubTaskItem subtask)
    {
        var orderedSubtasks = ProjectTaskItem.subtasks.OrderBy(s => s.position).ToList();
        var currentIndex = orderedSubtasks.IndexOf(subtask);

        if (currentIndex > 0)
        {
            // Swap positions with the subtask above
            var subtaskAbove = orderedSubtasks[currentIndex - 1];
            (subtask.position, subtaskAbove.position) = (subtaskAbove.position, subtask.position);

            StateHasChanged();
        }
    }

    private void MoveSubtaskDown(SubTaskItem subtask)
    {
        var orderedSubtasks = ProjectTaskItem.subtasks.OrderBy(s => s.position).ToList();
        var currentIndex = orderedSubtasks.IndexOf(subtask);

        if (currentIndex < orderedSubtasks.Count - 1)
        {
            // Swap positions with the subtask below
            var subtaskBelow = orderedSubtasks[currentIndex + 1];
            (subtask.position, subtaskBelow.position) = (subtaskBelow.position, subtask.position);

            StateHasChanged();
        }
    }

}