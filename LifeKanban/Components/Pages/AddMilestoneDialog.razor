@using LifeKanban.Client
@using LifeKanban.Model
@inject ProjectsClient Client

<div class="modal fade show gitlab-modal" id="addMilestoneModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Title</h4>
                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
            </div>
            <div class="modal-body">
                <EditForm Model="@MilestoneItem" FormName="AddMilestone" OnValidSubmit="@ValidateAndSubmit">
                    <DataAnnotationsValidator/>

                    <div class="mb-3">
                        <label for="milestoneName" class="form-label required">Title</label>
                        <InputText id="milestoneName" class="form-control" @bind-Value="MilestoneItem.name"/>
                        <ValidationMessage For="@(() => MilestoneItem.name)" class="text-danger"/>
                        @if (!string.IsNullOrEmpty(duplicateError))
                        {
                            <div class="text-danger mt-1">@duplicateError</div>
                        }
                    </div>
                </EditForm>

                @if (showNotification)
                {
                    <div class="alert mt-3 @notificationClass">
                        <strong>@notificationTitle</strong> @notificationMessage
                        <button type="button" class="btn-close float-end" @onclick="CloseNotification"></button>
                    </div>
                }
            </div>
            <div class="modal-footer">
                @switch (DialogType)
                {
                    case ModalDialogType.Ok:
                        <button type="button" class="btn btn-primary" @onclick="ValidateAndSubmit">@_actionButtonString</button>
                        break;
                    case ModalDialogType.OkCancel:
                        <button type="button" class="btn btn-secondary" @onclick="@ModalCancel">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="ValidateAndSubmit">@_actionButtonString</button>
                        break;
                    case ModalDialogType.DeleteCancel:
                        <button type="button" class="btn btn-secondary" @onclick="@ModalCancel">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="ValidateAndSubmit">@_actionButtonString</button>
                        break;
                }
            </div>
        </div>
    </div>
</div>

@code {

    // Error tracking
    private string duplicateError = string.Empty;

    // Validate before submitting
    private async Task ValidateAndSubmit()
    {
        if (ValidateMilestone())
        {
            await SafeModalOk();
        }
    }

    private bool ValidateMilestone()
    {
        duplicateError = string.Empty;

        if (string.IsNullOrWhiteSpace(MilestoneItem.name))
        {
            ShowErrorNotification("Validation Error", "Milestone name is required.");
            return false;
        }

        if (!_inEditMode || (CurrentMilestoneItem != null && MilestoneItem.name != CurrentMilestoneItem.name))
        {
            bool isDuplicate = Client.IsMilestoneNameDuplicate(MilestoneItem.name, ProjectItem);
            if (isDuplicate)
            {
                duplicateError = $"A milestone with the name '{MilestoneItem.name}' already exists in this project.";
                return false;
            }
        }

        return true;
    }

    private async Task SafeModalOk()
    {
        try
        {
            await ModalOk();
        }
        catch (Exception ex)
        {
            ShowErrorNotification("Error", $"Error saving milestone: {ex.Message}");
            StateHasChanged();
        }
    }

    [SupplyParameterFromForm] private MilestoneItem MilestoneItem { get; set; } = new();

    [Parameter] public string Title { get; set; } = "Add Milestone Details";

    [Parameter] public ProjectItem ProjectItem { get; set; }

    [Parameter] public MilestoneItem? CurrentMilestoneItem { get; set; }

    [Parameter] public EventCallback<bool> OnClose { get; set; }

    [Parameter] public ModalDialogType DialogType { get; set; }

    [Parameter] public EventCallback<MilestoneItem> OnItemSelected { get; set; }

    // Notification properties
    private bool showNotification = false;
    private string notificationMessage = string.Empty;
    private string notificationTitle = string.Empty;
    private string notificationClass = string.Empty;

    private bool _inEditMode = false;
    private string _actionButtonString = "Add";

    protected override void OnInitialized()
    {
        if (CurrentMilestoneItem is not null)
        {
            _inEditMode = true;
            Title = "Edit Milestone";
            _actionButtonString = "Save";
            MilestoneItem = CurrentMilestoneItem;
        }
    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private async Task<Task> ModalOk()
    {
        Guid? result;

        if (_inEditMode)
        {
            result = await Client.UpdateMilestone(MilestoneItem, ProjectItem.id);
            if (result is not null)
            {
                ShowSuccessNotification("Success", "Milestone updated successfully.");
            }
        }
        else
        {
            result = await Client.AddMilestone(MilestoneItem, ProjectItem.id);
            if (result is not null)
            {
                ShowSuccessNotification("Success", "Milestone added successfully.");
            }
        }

        if (result is not null)
        {
            await OnItemSelected.InvokeAsync(MilestoneItem);
        }
        else
        {
            ShowErrorNotification("Error", _inEditMode ? "Failed to update milestone." : "Failed to add milestone.");
        }

        return OnClose.InvokeAsync(true);
    }

    private void ShowSuccessNotification(string title, string message)
    {
        notificationTitle = title;
        notificationMessage = message;
        notificationClass = "alert-success";
        showNotification = true;

        // Auto-hide after 3 seconds
        var timer = new Timer(async _ =>
        {
            await InvokeAsync(() =>
            {
                showNotification = false;
                StateHasChanged();
            });
        }, null, 3000, Timeout.Infinite);
    }

    private void ShowErrorNotification(string title, string message)
    {
        notificationTitle = title;
        notificationMessage = message;
        notificationClass = "alert-danger";
        showNotification = true;
    }

    private void CloseNotification()
    {
        showNotification = false;
    }

    public enum ModalDialogType
    {
        Ok,
        OkCancel,
        DeleteCancel
    }

}