@page "/"
@using LifeKanban.Client
@using LifeKanban.Model
@using LifeKanban.StateManagement
@inject ProjectsClient Client
@inject NavigationManager NavigationManager
@inject ProjectStateService ProjectStateService
@rendermode InteractiveServer
@inject QuickTodosClient QuickTodosClient
@inject IJSRuntime JSRuntime

<PageTitle>Home</PageTitle>

<div class="dashboard-header d-flex align-items-center justify-content-between">
    <div class="d-flex align-items-center">
        <h1>Welcome to LifeKanban</h1>
        <button type="button" class="btn btn-link ms-2" @onclick="OpenColumnManagement">
            <span class="bi bi-gear-fill" title="Manage Dashboard"></span>
        </button>
    </div>
</div>

<div class="kanban-board">
    @foreach (var column in _dashboardColumns.Where(c => c.IsVisible).OrderBy(c => c.Order))
    {
        @if (column.Id == "life-months")
        {
            <div class="kanban-column @(_isLifeColumnCollapsed ? "column-collapsed" : "")" data-column-id="life-months">
                <div class="column-header" style="border-top: 4px solid #6f42c1;">
                    <div class="column-title">
                        Life in Months
                    </div>
                    <div class="column-actions">
                        <button type="button" @onclick="ToggleLifeColumn" title="@(_isLifeColumnCollapsed ? "Expand" : "Collapse")">
                            <span class="bi @(_isLifeColumnCollapsed ? "bi-chevron-right" : "bi-chevron-left")"></span>
                        </button>
                        <button type="button" @onclick="OpenLifeSettings">
                            <span class="bi bi-gear"></span>
                        </button>
                    </div>
                </div>
                <div class="cards-container">
                    @if (_showLifeSettings)
                    {
                        <div class="life-settings-card">
                            <div class="card-title">Life Settings</div>
                            <div class="mb-3">
                                <label for="birthDate" class="form-label">Birth Date</label>
                                <input type="date" class="form-control" id="birthDate" @bind="_birthDate"/>
                            </div>
                            <div class="mb-3">
                                <label for="expectedYears" class="form-label">Expected Life Span (years)</label>
                                <input type="number" class="form-control" id="expectedYears" @bind="_expectedYears" min="1" max="120"/>
                            </div>
                            <button type="button" class="btn btn-primary" @onclick="SaveLifeSettings">Save</button>
                        </div>
                    }
                    else
                    {
                        <div class="life-months-chart">
                            <p class="text-center mb-3">
                                @(_totalMonths - _currentMonth) of @_totalMonths months left (@Math.Round(_percentComplete)% complete)
                            </p>
                            <div class="months-container">
                                @for (int i = 0; i < _totalMonths; i++)
                                {
                                    bool isPast = i < _currentMonth;
                                    bool isCurrent = i == _currentMonth;

                                    <div class="month-circle @(isPast ? "past-month" : "") @(isCurrent ? "current-month" : "")"
                                         title="Month @(i + 1) of @_totalMonths">
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        else if (column.Id == "scribble")
        {
            <div class="kanban-column @(_isScribbleColumnCollapsed ? "column-collapsed" : "")" data-column-id="scribble">
                <div class="column-header" style="border-top: 4px solid #5cb85c;">
                    <div class="column-title">
                        Scribble
                    </div>
                    <div class="column-actions">
                        <button type="button" @onclick="ToggleScribbleColumn" title="@(_isScribbleColumnCollapsed ? "Expand" : "Collapse")">
                            <span class="bi @(_isScribbleColumnCollapsed ? "bi-chevron-right" : "bi-chevron-left")"></span>
                        </button>
                    </div>
                </div>
                <div class="cards-container">
                    <div class="scribble-container">
                        <textarea
                        class="scribble-textarea"
                        placeholder="Type your thoughts here..."
                        @bind="_scribbleText"
                        @bind:event="oninput"
                        @onblur="SaveScribble">
                    </textarea>
                        @if (_showScribbleSaved)
                        {
                            <div class="save-indicator">
                                <span class="bi bi-check-circle"></span> Saved
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
        else if (column.Id == "quick-todos")
        {
            <div class="kanban-column">
                <div class="column-header" style="border-top: 4px solid #0066cc;">
                    <div class="column-title">
                        Quick To-Dos
                        <div class="column-count">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor">
                                <path d="M8 9.5a1.5 1.5 0 100-3 1.5 1.5 0 000 3z"/>
                                <path fill-rule="evenodd" d="M8 0a8 8 0 100 16A8 8 0 008 0zM1.5 8a6.5 6.5 0 1113 0 6.5 6.5 0 01-13 0z"/>
                            </svg>
                            @_quickTodos.Count
                        </div>
                    </div>
                </div>
                <div class="cards-container">
                    <div class="add-todo-container">
                        <div class="d-flex align-items-center justify-content-between">
                            <div class="d-flex align-items-center flex-grow-1">
                                <div class="form-check-input me-2 placeholder-checkbox"></div>
                                <input type="text" class="todo-input"
                                       placeholder="Click here to add new to-do..."
                                       @bind="_newTodoTitle"
                                       @onkeydown="HandleNewTodoKeyDown"/>
                            </div>
                            <button type="button" class="todo-add-btn" @onclick="AddQuickTodo">
                                <span class="bi bi-plus"></span>
                            </button>
                        </div>
                    </div>

                    @{
                        var incompleteTodos = _quickTodos
                            .Where(t => !t.IsCompleted)
                            .OrderBy(t => t.DateCreated);

                        var completedTodos = _quickTodos
                            .Where(t => t.IsCompleted)
                            .OrderByDescending(t => t.DateCompleted);

                        var sortedTodos = incompleteTodos.Concat(completedTodos);
                    }

                    @foreach (var todo in sortedTodos)
                    {
                        <div class="todo-item @(todo.IsCompleted ? "completed-todo" : "")" @key="todo.Id">
                            <div class="d-flex align-items-center justify-content-between">
                                <div class="d-flex align-items-center flex-grow-1">
                                    <input type="checkbox" class="form-check-input me-2"
                                           checked="@todo.IsCompleted"
                                           @onchange="(e) => ToggleQuickTodoCompletion(todo, e.Value is bool value && value)"/>
                                    <input type="text" class="todo-input @(todo.IsCompleted ? "completed-input" : "")"
                                           value="@todo.Title"
                                           @onchange="e => UpdateQuickTodoTitle(todo, e.Value?.ToString() ?? string.Empty)"
                                           @onkeydown="e => HandleTodoKeyDown(e, todo)"/>
                                </div>
                                <button type="button" class="todo-delete-btn" @onclick="() => DeleteQuickTodo(todo)">
                                    <span class="bi bi-trash"></span>
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        else if (column.Id == "in-progress")
        {
            <div class="kanban-column column-inprogress">
                <div class="column-header">
                    <div class="column-title">
                        In Progress
                        <div class="column-count">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor">
                                <path d="M8 9.5a1.5 1.5 0 100-3 1.5 1.5 0 000 3z"/>
                                <path fill-rule="evenodd" d="M8 0a8 8 0 100 16A8 8 0 008 0zM1.5 8a6.5 6.5 0 1113 0 6.5 6.5 0 01-13 0z"/>
                            </svg>
                            @_inProgressTasks.Count
                        </div>
                    </div>
                </div>
                <div class="cards-container">
                    @foreach (var task in _inProgressTasks)
                    {
                        <div class="kanban-card">
                            <div class="card-title">@task.Task.title</div>

                            @if (!string.IsNullOrEmpty(task.Task.description))
                            {
                                <p style="color: var(--gl-text-secondary); font-size: 13px; margin-bottom: 12px;">@task.Task.description</p>
                            }

                            @if (task.Task.subtasks.Any())
                            {
                                <div class="subtasks-list">
                                    @foreach (var subtask in task.Task.subtasks)
                                    {
                                        <div class="subtask-item">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" checked="@subtask.isCompleted"
                                                       @onchange="async () => await ToggleSubtaskCompletion(task.Task, subtask)"/>
                                                <label class="form-check-label @(subtask.isCompleted ? "text-decoration-line-through" : "")">
                                                    @subtask.title
                                                </label>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }

                            <div class="card-footer">
                                <div class="card-metadata">
                                    <div class="card-metadata">
                                        @if (task.Task.milestone != null)
                                        {
                                            <div class="card-labels bottom-labels">
                                                <span class="card-label" style="background-color: var(--column-ready-color);">
                                                    @task.Task.milestone.name
                                                </span>
                                            </div>
                                        }
                                        <div class="card-labels bottom-labels">
                                            <span class="card-label" style="background-color: var(--column-ready-color);">
                                                @task.ProjectName
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="card-actions">
                                    <div class="dropdown">
                                        <button type="button" class="card-btn" id="dropdownMenu-@task.Task.id" data-bs-toggle="dropdown" aria-expanded="false">
                                            <span class="bi bi-three-dots"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    }
</div>

@if (_showColumnManagementModal)
{
    <ColumnManagementModal 
        Columns="@_dashboardColumns" 
        OnClose="CloseColumnManagement" 
        OnSave="SaveColumnSettings" />
}

<style>
    /* Life in Months styles */
    .life-settings-card {
        background-color: var(--dark-card-bg);
        border: 1px solid var(--dark-border);
        border-radius: 8px;
        padding: 16px;
        margin-bottom: 15px;
    }

    .life-months-chart {
        background-color: var(--dark-card-bg);
        border: 1px solid var(--dark-border);
        border-radius: 8px;
        padding: 16px;
    }

    .months-container {
        display: flex;
        flex-wrap: wrap;
        gap: 4px;
        justify-content: flex-start;
    }

    .month-circle {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background-color: var(--dark-border);
        margin: 2px;
    }

    .past-month {
        background-color: #6f42c1;
    }

    .current-month {
        background-color: #fd7e14;
        animation: shape-shift 2s infinite alternate;
    }

    @@keyframes shape-shift {
        0% {
            /* Square-like shape */
            border-radius: 0%;
            clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
        }
        100% {
            /* Diamond-like shape */
            border-radius: 0%;
            clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);
        }
    }

    /* Simplified styles for To-Do items */
    .todo-item {
        padding: 8px;
        margin-bottom: 10px;
        background-color: transparent;
        cursor: pointer;
    }

    .todo-delete-btn {
        background: transparent;
        border: none;
        color: var(--dark-text-secondary);
        opacity: 0.7;
    }

    .todo-delete-btn:hover {
        opacity: 1;
        color: #ff6b6b;
    }

    .add-todo-container {
        padding: 8px;
        position: relative;
        background-color: transparent;
    }

    .todo-input {
        width: 100%;
        background-color: transparent;
        border: none;
        color: var(--dark-text);
        outline: none;
    }

    .add-button {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        color: var(--dark-text-secondary);
        background: transparent;
        border: none;
        cursor: pointer;
        padding: 0 5px;
    }

    .add-button:hover {
        color: var(--dark-text);
    }

    .completed-todo {
        opacity: 0.6;
    }

    .completed-input {
        text-decoration: line-through;
    }

    .todo-input:focus {
        background-color: rgba(255, 255, 255, 0.05);
        outline: none;
        transition: background-color 0.2s ease;
    }

    .todo-item:has(.todo-input:focus) {
        background-color: rgba(255, 255, 255, 0.02);
    }

    .todo-input:focus {
        border-left: 2px solid var(--primary-color);
        padding-left: 3px;
    }

    .add-todo-container {
        padding: 8px;
        background-color: transparent;
        margin-bottom: 10px;
    }

    .todo-add-btn {
        background: transparent;
        border: none;
        color: var(--dark-text-secondary);
        opacity: 0.7;
    }

    .todo-add-btn:hover {
        opacity: 1;
        color: var(--primary-color);
    }

    .add-button {
        display: none;
    }

    .placeholder-checkbox {
        width: 16px;
        height: 16px;
        border: 1px solid var(--dark-text-secondary);
        border-radius: 3px;
        opacity: 0.3;
    }

    .todo-input {
        width: 100%;
        background-color: transparent;
        border: none;
        color: var(--dark-text);
        outline: none;
    }

    .add-todo-container:hover {
        background-color: rgba(255, 255, 255, 0.02);
    }

    .todo-item, .add-todo-container, .todo-add-btn, .todo-delete-btn {
        transition: all 0.2s ease;
    }
</style>

@code {


    public class DashboardColumn
    {
        public string Id { get; set; } = string.Empty;
        public string Title { get; set; } = string.Empty;
        public bool IsVisible { get; set; } = true;
        public int Order { get; set; }
    }

    private List<DashboardColumn> _dashboardColumns = new();
    private bool _showColumnManagementModal = false;

    private List<InProgressTaskViewModel> _inProgressTasks = [];
    private List<QuickTodoItem> _quickTodos = [];
    private string _newTodoTitle = string.Empty;

    // Life in Months properties
    private bool _isLifeColumnCollapsed = false;
    private bool _showLifeSettings = false;
    private DateTime _birthDate = DateTime.Now.AddYears(-30); // Default to 30 years ago
    private int _expectedYears = 60; // Default life expectancy
    private int _totalMonths = 720; // Default (60 years * 12 months)
    private int _currentMonth = 360; // Default to halfway through
    private double _percentComplete = 50; // Default to 50%

    private bool _isScribbleColumnCollapsed = false;
    private string _scribbleText = string.Empty;
    private bool _showScribbleSaved = false;
    private Timer? _saveIndicatorTimer;

    protected override async Task OnInitializedAsync()
    {
        // Initialize the dashboard columns
        _dashboardColumns = new List<DashboardColumn>
        {
            new() { Id = "life-months", Title = "Life in Months", Order = 0, IsVisible = true },
            new() { Id = "scribble", Title = "Scribble", Order = 1, IsVisible = true },
            new() { Id = "quick-todos", Title = "Quick To-Dos", Order = 2, IsVisible = true },
            new() { Id = "in-progress", Title = "In Progress", Order = 3, IsVisible = true }
        };

        // Load column settings from local storage
        await LoadColumnSettings();

        await LoadInProgressTasks();
        await LoadQuickTodos();
        await LoadScribble();
        ProjectStateService.ProjectsChanged += OnProjectsChanged;

        // Load life settings from local storage
        await LoadLifeSettings();
        await CalculateLifeMonths();
    }

    private async Task LoadColumnSettings()
    {
        try
        {
            var columnSettings = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "dashboardColumns");
            if (!string.IsNullOrEmpty(columnSettings))
            {
                _dashboardColumns = System.Text.Json.JsonSerializer.Deserialize<List<DashboardColumn>>(columnSettings) ?? _dashboardColumns;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading column settings: {ex.Message}");
        }
    }

    private async Task SaveColumnSettings(List<DashboardColumn> columns)
    {
        _dashboardColumns = columns;

        // Update order based on position in list (only for visible columns)
        var visibleColumns = _dashboardColumns.Where(c => c.IsVisible).ToList();
        for (int i = 0; i < visibleColumns.Count; i++)
        {
            visibleColumns[i].Order = i;
        }

        try
        {
            var columnSettings = System.Text.Json.JsonSerializer.Serialize(_dashboardColumns);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "dashboardColumns", columnSettings);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving column settings: {ex.Message}");
        }

        _showColumnManagementModal = false;
        StateHasChanged();
    }

    private void OpenColumnManagement()
    {
        _showColumnManagementModal = true;
    }

    private void CloseColumnManagement()
    {
        _showColumnManagementModal = false;
    }

    private async Task LoadLifeSettings()
    {
        try
        {
            var birthDateStr = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "lifeBirthDate");
            var expectedYearsStr = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "lifeExpectedYears");
            var collapsedStr = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "lifeColumnCollapsed");

            if (!string.IsNullOrEmpty(birthDateStr) && DateTime.TryParse(birthDateStr, out DateTime savedBirthDate))
            {
                _birthDate = savedBirthDate;
            }

            if (!string.IsNullOrEmpty(expectedYearsStr) && int.TryParse(expectedYearsStr, out int savedExpectedYears))
            {
                _expectedYears = savedExpectedYears;
            }

            if (!string.IsNullOrEmpty(collapsedStr) && bool.TryParse(collapsedStr, out bool savedCollapsed))
            {
                _isLifeColumnCollapsed = savedCollapsed;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading life settings: {ex.Message}");
        }
    }

    private async Task SaveLifeSettings()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "lifeBirthDate", _birthDate.ToString("o"));
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "lifeExpectedYears", _expectedYears.ToString());

            _showLifeSettings = false;
            await CalculateLifeMonths();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving life settings: {ex.Message}");
        }
    }

    private async Task CalculateLifeMonths()
    {
// Calculate total months based on expected years
        _totalMonths = _expectedYears * 12;

// Calculate current month based on birth date
        var now = DateTime.Now;
        var monthsLived = ((now.Year - _birthDate.Year) * 12) + now.Month - _birthDate.Month;

        if (now.Day < _birthDate.Day)
        {
            monthsLived--; // Adjust if we haven't reached the day of month yet
        }

        _currentMonth = Math.Max(0, Math.Min(monthsLived, _totalMonths));

// Calculate percentage complete
        _percentComplete = Math.Round((double)_currentMonth / _totalMonths * 100, 1);

        StateHasChanged();
    }

    private async Task ToggleLifeColumn()
    {
        _isLifeColumnCollapsed = !_isLifeColumnCollapsed;
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "lifeColumnCollapsed", _isLifeColumnCollapsed.ToString().ToLower());
    }

    private void OpenLifeSettings()
    {
        _showLifeSettings = true;
    }

    private async void OnProjectsChanged()
    {
        await LoadInProgressTasks();
        StateHasChanged();
    }

    private async Task LoadQuickTodos()
    {
        _quickTodos = await QuickTodosClient.GetQuickTodos();
        StateHasChanged();
    }

    private async Task LoadInProgressTasks()
    {
        _inProgressTasks.Clear();
        var projects = await Client.GetProjects();

        foreach (var project in projects)
        {
            var fullProject = await Client.GetProjectById(project.id);
            if (fullProject != null)
            {
                var inProgressTasks = fullProject.tasks
                    .Where(t => t.status == "In Progress")
                    .Select(t => new InProgressTaskViewModel
                    {
                        Task = t,
                        ProjectId = project.id,
                        ProjectName = project.name
                    })
                    .ToList();

                _inProgressTasks.AddRange(inProgressTasks);
            }
        }
    }

    private async Task MarkTaskAsDone(InProgressTaskViewModel task)
    {
        task.Task.status = "Done";
        await Client.UpdateTask(task.Task, task.ProjectId);
        await LoadInProgressTasks();
        ProjectStateService.NotifyStateChanged();
    }

    private void GoToProject(Guid projectId)
    {
        NavigationManager.NavigateTo($"/kanbanboard/{projectId}");
    }

    private async Task AddQuickTodo()
    {
        if (!string.IsNullOrWhiteSpace(_newTodoTitle))
        {
            var newTodo = new QuickTodoItem
            {
                Title = _newTodoTitle,
                IsCompleted = false,
                DateCreated = DateTime.Now
            };

            var result = await QuickTodosClient.AddQuickTodo(newTodo);

            if (result != null)
            {
                newTodo.Id = result.Value;
                _quickTodos.Add(newTodo);
            }

            _newTodoTitle = string.Empty;
            StateHasChanged();
        }
    }

    private async Task DeleteQuickTodo(QuickTodoItem todo)
    {
        var result = await QuickTodosClient.DeleteQuickTodo(todo.Id);

        if (result)
        {
            _quickTodos.Remove(todo);
            StateHasChanged();
        }
    }

    private async Task ToggleQuickTodoCompletion(QuickTodoItem todo, bool isCompleted)
    {
        todo.IsCompleted = isCompleted;

        if (isCompleted)
        {
            todo.DateCompleted = DateTime.Now;
        }
        else
        {
            todo.DateCompleted = null;
        }

        await QuickTodosClient.UpdateQuickTodo(todo);
        StateHasChanged();
    }

    private async Task UpdateQuickTodoTitle(QuickTodoItem todo, string newTitle)
    {
        todo.Title = newTitle;
        await QuickTodosClient.UpdateQuickTodo(todo);
    }

    private async void HandleNewTodoKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await AddQuickTodo();
        }
    }

    private async void HandleTodoKeyDown(KeyboardEventArgs e, QuickTodoItem todo)
    {
        if ((e.Code == "Enter" || e.Code == "NumpadEnter") && string.IsNullOrWhiteSpace(todo.Title))
        {
            await DeleteQuickTodo(todo);
        }
    }

    private async Task ToggleSubtaskCompletion(ProjectTaskItem taskItem, SubTaskItem subtask)
    {
        subtask.isCompleted = !subtask.isCompleted;

        var project = _inProgressTasks.FirstOrDefault(t => t.Task.id == taskItem.id);
        if (project != null)
        {
            await Client.UpdateTask(taskItem, project.ProjectId);
        }
    }

    public class InProgressTaskViewModel
    {
        public ProjectTaskItem Task { get; set; }
        public Guid ProjectId { get; set; }
        public string ProjectName { get; set; } = string.Empty;
    }

    public void Dispose()
    {
        ProjectStateService.ProjectsChanged -= OnProjectsChanged;
        _saveIndicatorTimer?.Dispose();
    }

    private async Task ToggleScribbleColumn()
    {
        _isScribbleColumnCollapsed = !_isScribbleColumnCollapsed;
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "scribbleColumnCollapsed", _isScribbleColumnCollapsed.ToString().ToLower());
    }

    private async Task LoadScribble()
    {
        try
        {
            var savedText = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "scribbleText");
            var collapsedState = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "scribbleColumnCollapsed");

            if (!string.IsNullOrEmpty(savedText))
            {
                _scribbleText = savedText;
            }

            if (!string.IsNullOrEmpty(collapsedState) && bool.TryParse(collapsedState, out bool isCollapsed))
            {
                _isScribbleColumnCollapsed = isCollapsed;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading scribble: {ex.Message}");
        }
    }

    private async Task SaveScribble()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "scribbleText", _scribbleText);

            // Show saved indicator
            _showScribbleSaved = true;

            // Clear any existing timer
            _saveIndicatorTimer?.Dispose();

            // Hide indicator after 2 seconds
            _saveIndicatorTimer = new System.Threading.Timer(async _ =>
            {
                await InvokeAsync(() =>
                {
                    _showScribbleSaved = false;
                    StateHasChanged();
                });
            }, null, 2000, Timeout.Infinite);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving scribble: {ex.Message}");
        }
    }

}