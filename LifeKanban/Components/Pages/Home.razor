@page "/"
@using LifeKanban.Client
@using LifeKanban.Model
@using LifeKanban.StateManagement
@inject ProjectsClient Client
@inject NavigationManager NavigationManager
@inject ProjectStateService ProjectStateService
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div class="dashboard-header">
    <h1>Welcome to LifeKanban</h1>
</div>

<div class="kanban-board">
    <div class="kanban-column">
        <div class="column-header" style="border-top: 4px solid #0066cc;">
            <div class="column-title">
                Quick To-Dos
                <div class="column-count">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor">
                        <path d="M8 9.5a1.5 1.5 0 100-3 1.5 1.5 0 000 3z"/>
                        <path fill-rule="evenodd" d="M8 0a8 8 0 100 16A8 8 0 008 0zM1.5 8a6.5 6.5 0 1113 0 6.5 6.5 0 01-13 0z"/>
                    </svg>
                    @_quickTodos.Count
                </div>
            </div>
        </div>
        <div class="cards-container">

            <div class="add-todo-container">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="d-flex align-items-center flex-grow-1">
                        <!-- Optional: Add a placeholder checkbox for visual consistency -->
                        <div class="form-check-input me-2 placeholder-checkbox"></div>
                        <input type="text" class="todo-input"
                               placeholder="Click here to add new to-do..."
                               @bind="_newTodoTitle"
                               @onkeydown="HandleNewTodoKeyDown"/>
                    </div>
                    <button type="button" class="todo-add-btn" @onclick="AddQuickTodo">
                        <span class="bi bi-plus"></span>
                    </button>
                </div>
            </div>

            @{
                // Use a code block to prepare the sorted list
                var incompleteTodos = _quickTodos
                    .Where(t => !t.IsCompleted)
                    .OrderBy(t => t.DateCreated); // Oldest created first (top)

                var completedTodos = _quickTodos
                    .Where(t => t.IsCompleted)
                    .OrderByDescending(t => t.DateCompleted); // Latest completed first (top), so earliest completed is at the bottom

                var sortedTodos = incompleteTodos.Concat(completedTodos);
            }

            @foreach (var todo in sortedTodos)
            {
                <!-- Adding @key is crucial to ensure each todo maintains its own state -->
                <div class="todo-item @(todo.IsCompleted ? "completed-todo" : "")" @key="todo.Id">
                    <div class="d-flex align-items-center justify-content-between">
                        <div class="d-flex align-items-center flex-grow-1">
                            <!-- Make sure the event is properly bound to this specific todo -->
                            <input type="checkbox" class="form-check-input me-2"
                                   checked="@todo.IsCompleted"
                                   @onchange="(e) => ToggleQuickTodoCompletion(todo, e.Value is bool value && value)"/>
                            <input type="text" class="todo-input @(todo.IsCompleted ? "completed-input" : "")"
                                   value="@todo.Title"
                                   @onchange="e => UpdateQuickTodoTitle(todo, e.Value?.ToString() ?? string.Empty)"
                                   @onkeydown="e => HandleTodoKeyDown(e, todo)"/>
                        </div>
                        <button type="button" class="todo-delete-btn" @onclick="() => DeleteQuickTodo(todo)">
                            <span class="bi bi-trash"></span>
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="kanban-column column-inprogress">
        <div class="column-header">
            <div class="column-title">
                In Progress
                <div class="column-count">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor">
                        <path d="M8 9.5a1.5 1.5 0 100-3 1.5 1.5 0 000 3z"/>
                        <path fill-rule="evenodd" d="M8 0a8 8 0 100 16A8 8 0 008 0zM1.5 8a6.5 6.5 0 1113 0 6.5 6.5 0 01-13 0z"/>
                    </svg>
                    @_inProgressTasks.Count
                </div>
            </div>
        </div>
        <div class="cards-container">
            @foreach (var task in _inProgressTasks)
            {
                <div class="kanban-card">
                    <div class="card-title">@task.Task.title</div>

                    @if (!string.IsNullOrEmpty(task.Task.description))
                    {
                        <p style="color: var(--gl-text-secondary); font-size: 13px; margin-bottom: 12px;">@task.Task.description</p>
                    }

                    @if (task.Task.subtasks.Any())
                    {
                        <div class="subtasks-list">
                            @foreach (var subtask in task.Task.subtasks)
                            {
                                <div class="subtask-item">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" checked="@subtask.isCompleted"
                                               @onchange="async () => await ToggleSubtaskCompletion(task.Task, subtask)"/>
                                        <label class="form-check-label @(subtask.isCompleted ? "text-decoration-line-through" : "")">
                                            @subtask.title
                                        </label>
                                    </div>
                                </div>
                            }
                        </div>
                    }

                    <div class="card-footer">
                        <div class="card-metadata">
                            <div class="card-metadata">
                                @if (task.Task.milestone != null)
                                {
                                    <div class="card-labels bottom-labels">
                                        <span class="card-label" style="background-color: var(--column-ready-color);">
                                            @task.Task.milestone.name
                                        </span>
                                    </div>
                                }
                                <div class="card-labels bottom-labels">
                                    <span class="card-label" style="background-color: var(--column-ready-color);">
                                        @task.ProjectName
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="card-actions">
                            <div class="dropdown">
                                <button type="button" class="card-btn" id="dropdownMenu-@task.Task.id" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span class="bi bi-three-dots"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    /* Simplified styles for To-Do items */
    .todo-item {
        padding: 8px;
        margin-bottom: 10px;
        background-color: transparent;
        cursor: pointer;
    }

    .todo-delete-btn {
        background: transparent;
        border: none;
        color: var(--dark-text-secondary);
        opacity: 0.7;
    }

    .todo-delete-btn:hover {
        opacity: 1;
        color: #ff6b6b;
    }

    .add-todo-container {
        padding: 8px;
        position: relative;
        background-color: transparent;
    }

    .todo-input {
        width: 100%;
        background-color: transparent;
        border: none;
        color: var(--dark-text);
        outline: none;
    }

    .add-button {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        color: var(--dark-text-secondary);
        background: transparent;
        border: none;
        cursor: pointer;
        padding: 0 5px;
    }

    .add-button:hover {
        color: var(--dark-text);
    }

    .completed-todo {
        opacity: 0.6;
    }

    .completed-input {
        text-decoration: line-through;
    }

    .todo-input:focus {
        background-color: rgba(255, 255, 255, 0.05); /* Slight white overlay for dark themes */
        outline: none; /* Remove default focus outline */
        transition: background-color 0.2s ease; /* Smooth transition */
    }

    /* Make sure the container also reflects the focus state */
    .todo-item:has(.todo-input:focus) {
        background-color: rgba(255, 255, 255, 0.02); /* Subtle background change for the entire item */
    }

    /* Optional: add a subtle left border when focused for additional visual cue */
    .todo-input:focus {
        border-left: 2px solid var(--primary-color);
        padding-left: 3px;
    }

    /* Updated styles for the add todo container to match existing todos */
    .add-todo-container {
        padding: 8px;
        background-color: transparent;
        margin-bottom: 10px;
    }

    /* Make the add button match the delete button */
    .todo-add-btn {
        background: transparent;
        border: none;
        color: var(--dark-text-secondary);
        opacity: 0.7;
    }

    .todo-add-btn:hover {
        opacity: 1;
        color: var(--primary-color); /* Use primary color for add vs red for delete */
    }

    /* Remove the old add button styles */
    .add-button {
        display: none;
    }

    /* Optional: Style for the placeholder checkbox */
    .placeholder-checkbox {
        width: 16px;
        height: 16px;
        border: 1px solid var(--dark-text-secondary);
        border-radius: 3px;
        opacity: 0.3;
    }

    /* Ensure both types of inputs have the same styling */
    .todo-input {
        width: 100%;
        background-color: transparent;
        border: none;
        color: var(--dark-text);
        outline: none;
    }

    /* Match hover effects */
    .add-todo-container:hover {
        background-color: rgba(255, 255, 255, 0.02);
    }

    /* Add transition for smoother hover effects */
    .todo-item, .add-todo-container, .todo-add-btn, .todo-delete-btn {
        transition: all 0.2s ease;
    }
</style>

@code {
    private List<InProgressTaskViewModel> _inProgressTasks = [];
    private List<QuickTodoItem> _quickTodos = [];
    private string _newTodoTitle = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadInProgressTasks();
        InitializeQuickTodos();
        ProjectStateService.ProjectsChanged += OnProjectsChanged;
    }

    private async void OnProjectsChanged()
    {
        await LoadInProgressTasks();
        StateHasChanged();
    }

    private async Task LoadInProgressTasks()
    {
        _inProgressTasks.Clear();
        var projects = await Client.GetProjects();

        foreach (var project in projects)
        {
            var fullProject = await Client.GetProjectById(project.id);
            if (fullProject != null)
            {
                var inProgressTasks = fullProject.tasks
                    .Where(t => t.status == "In Progress")
                    .Select(t => new InProgressTaskViewModel
                    {
                        Task = t,
                        ProjectId = project.id,
                        ProjectName = project.name
                    })
                    .ToList();

                _inProgressTasks.AddRange(inProgressTasks);
            }
        }
    }

    private async Task MarkTaskAsDone(InProgressTaskViewModel task)
    {
        task.Task.status = "Done";
        await Client.UpdateTask(task.Task, task.ProjectId);
        await LoadInProgressTasks();
        ProjectStateService.NotifyStateChanged();
    }

    private void GoToProject(Guid projectId)
    {
        NavigationManager.NavigateTo($"/kanbanboard/{projectId}");
    }

    private void InitializeQuickTodos()
    {
        _quickTodos = new List<QuickTodoItem>
        {
            new QuickTodoItem
            {
                Id = Guid.NewGuid(),
                Title = "Review project documentation",
                IsCompleted = false,
                DateCreated = DateTime.Now.AddDays(-1)
            },
            new QuickTodoItem
            {
                Id = Guid.NewGuid(),
                Title = "Prepare for weekly team meeting",
                IsCompleted = false,
                DateCreated = DateTime.Now
            }
        };
    }

    private void AddQuickTodo()
    {
        if (!string.IsNullOrWhiteSpace(_newTodoTitle))
        {
            _quickTodos.Add(new QuickTodoItem
            {
                Id = Guid.NewGuid(),
                Title = _newTodoTitle,
                IsCompleted = false,
                DateCreated = DateTime.Now
            });

            _newTodoTitle = string.Empty;
        }
    }

    private void DeleteQuickTodo(QuickTodoItem todo)
    {
        _quickTodos.Remove(todo);
    }

    private void ToggleQuickTodoCompletion(QuickTodoItem todo, bool isCompleted)
    {
        // Make sure we're only updating this specific todo
        todo.IsCompleted = isCompleted;
    
        // Set or clear the completion date based on status
        if (isCompleted)
        {
            todo.DateCompleted = DateTime.Now;
        }
        else
        {
            todo.DateCompleted = null;
        }

        // Force UI refresh
        StateHasChanged();
    }

    private void UpdateQuickTodoTitle(QuickTodoItem todo, string newTitle)
    {
        todo.Title = newTitle;
    }

    private void HandleNewTodoKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            AddQuickTodo();
        }
    }

    private void HandleQuickTodoKeyDown(KeyboardEventArgs e, QuickTodoItem todo)
    {
        if ((e.Code == "Enter" || e.Code == "NumpadEnter") && string.IsNullOrWhiteSpace(todo.Title))
        {
            DeleteQuickTodo(todo);
        }
    }

    private async Task ToggleSubtaskCompletion(ProjectTaskItem taskItem, SubTaskItem subtask)
    {
// Toggle the completion status
        subtask.isCompleted = !subtask.isCompleted;

// Find the project ID for this task
        var project = _inProgressTasks.FirstOrDefault(t => t.Task.id == taskItem.id);
        if (project != null)
        {
// Update the task on the server
            await Client.UpdateTask(taskItem, project.ProjectId);
        }
    }

    public class InProgressTaskViewModel
    {
        public ProjectTaskItem Task { get; set; }
        public Guid ProjectId { get; set; }
        public string ProjectName { get; set; } = string.Empty;
    }

    public class QuickTodoItem
    {
        public Guid Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public bool IsCompleted { get; set; }
        public DateTime DateCreated { get; set; }
        public DateTime? DateCompleted { get; set; } // New nullable DateTime property
    }

    public void Dispose()
    {
        ProjectStateService.ProjectsChanged -= OnProjectsChanged;
    }
    
    private void HandleTodoKeyDown(KeyboardEventArgs e, QuickTodoItem todo)
    {
        // If enter is pressed and title is empty, delete the todo
        if ((e.Code == "Enter" || e.Code == "NumpadEnter") && string.IsNullOrWhiteSpace(todo.Title))
        {
            DeleteQuickTodo(todo);
        }
    }

}