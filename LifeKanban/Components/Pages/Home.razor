@page "/"
@using LifeKanban.Client
@using LifeKanban.Model
@using LifeKanban.StateManagement
@inject ProjectsClient Client
@inject NavigationManager NavigationManager
@inject ProjectStateService ProjectStateService
@rendermode InteractiveServer
@inject QuickTodosClient QuickTodosClient
@inject IJSRuntime JSRuntime

<PageTitle>Home</PageTitle>

<div class="dashboard-header d-flex align-items-center justify-content-between">
    <div class="d-flex align-items-center">
        <h1>Welcome to LifeKanban</h1>
        <button type="button" class="btn btn-link ms-2" @onclick="OpenColumnManagement">
            <span class="bi bi-gear-fill" title="Manage Dashboard"></span>
        </button>
    </div>
</div>

<div class="kanban-board">
    @foreach (var column in _dashboardColumns.Where(c => c.IsVisible).OrderBy(c => c.Order))
    {
        @if (column.Id == "life-months")
        {
            <LifeVisualizationColumn OnToggle="HandleLifeColumnToggle"/>
        }
        else if (column.Id == "scribble")
        {
            <ScribbleColumn OnToggle="HandleScribbleColumnToggle"/>
        }
        else if (column.Id == "quick-todos")
        {
            <QuickTodosColumn/>
        }
        else if (column.Id == "in-progress")
        {
            <InProgressTasksColumn/>
        }
    }
</div>

@if (_showColumnManagementModal)
{
    <ColumnManagementModal
        Columns="@_dashboardColumns"
        OnClose="CloseColumnManagement"
        OnSave="SaveColumnSettings"/>
}

@code {

    public class DashboardColumn
    {
        public string Id { get; set; } = string.Empty;
        public string Title { get; set; } = string.Empty;
        public bool IsVisible { get; set; } = true;
        public int Order { get; set; }
    }

    private List<DashboardColumn> _dashboardColumns = new();
    private bool _showColumnManagementModal = false;

    protected override async Task OnInitializedAsync()
    {
// Initialize the dashboard columns
        _dashboardColumns = new List<DashboardColumn>
        {
            new() { Id = "life-months", Title = "Life in Months", Order = 0, IsVisible = true },
            new() { Id = "scribble", Title = "Scribble", Order = 1, IsVisible = true },
            new() { Id = "quick-todos", Title = "Quick To-Dos", Order = 2, IsVisible = true },
            new() { Id = "in-progress", Title = "In Progress", Order = 3, IsVisible = true }
        };

// Load column settings from local storage
        await LoadColumnSettings();
    }

    private async Task LoadColumnSettings()
    {
        try
        {
            var columnSettings = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "dashboardColumns");
            if (!string.IsNullOrEmpty(columnSettings))
            {
                _dashboardColumns = System.Text.Json.JsonSerializer.Deserialize<List<DashboardColumn>>(columnSettings) ?? _dashboardColumns;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading column settings: {ex.Message}");
        }
    }

    private async Task SaveColumnSettings(List<DashboardColumn> columns)
    {
        _dashboardColumns = columns;

// Update order based on position in list (only for visible columns)
        var visibleColumns = _dashboardColumns.Where(c => c.IsVisible).ToList();
        for (int i = 0; i < visibleColumns.Count; i++)
        {
            visibleColumns[i].Order = i;
        }

        try
        {
            var columnSettings = System.Text.Json.JsonSerializer.Serialize(_dashboardColumns);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "dashboardColumns", columnSettings);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving column settings: {ex.Message}");
        }

        _showColumnManagementModal = false;
        StateHasChanged();
    }

    private void OpenColumnManagement()
    {
        _showColumnManagementModal = true;
    }

    private void CloseColumnManagement()
    {
        _showColumnManagementModal = false;
    }

// Event handlers for column toggle events 
    private void HandleLifeColumnToggle(bool isCollapsed)
    {
// Any additional logic needed when life column is toggled
    }

    private void HandleScribbleColumnToggle(bool isCollapsed)
    {
// Any additional logic needed when scribble column is toggled
    }

}