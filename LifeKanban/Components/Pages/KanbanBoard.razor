@rendermode InteractiveServer
@inject ProjectsClient Client
@page "/kanbanboard/{projectId:guid}"
@using LifeKanban.Client
@using LifeKanban.Model
@inject IJSRuntime JSRuntime

<div class="d-flex align-items-center mb-3" style="color: var(--gl-text-color);">
    <h3 class="me-2 mb-0">@_projectItem.name</h3>
    <button type="button" class="btn btn-link" style="color: var(--gl-text-color);" @onclick="EditProjectDialogOnClick">
        <span class="bi bi-pencil"></span>
    </button>
</div>

<div class="kanban-board">
    @foreach (var column in _columns)
    {
        var columnClass = $"kanban-column column-{column.Title.ToLower().Replace(" ", "")}";

        @if (column.Title == "Milestones")
        {
            <div class="@columnClass" data-column-id="@column.Id">
                <div class="column-header">
                    <div class="column-title">
                        @column.Title
                        <div class="column-count">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor">
                                <path d="M8 9.5a1.5 1.5 0 100-3 1.5 1.5 0 000 3z"/>
                                <path fill-rule="evenodd" d="M8 0a8 8 0 100 16A8 8 0 008 0zM1.5 8a6.5 6.5 0 1113 0 6.5 6.5 0 01-13 0z"/>
                            </svg>
                            @_milestones.Count
                        </div>
                    </div>
                    <div class="column-actions">
                        <button type="button" @onclick="AddMilestoneDialogOpen">
                            <span class="bi bi-plus"></span>
                        </button>
                    </div>
                </div>
                <div class="cards-container"
                     dropzone="move">

                    @foreach (var milestone in _milestones)
                    {
                        var tasks = _tasks.Where(x => x.Task.milestone?.id == milestone.Milestone.id).Select(x => x.Task).ToList();
                        var totalTasks = tasks.Count;
                        var completedTasks = tasks.Count(t => t.status == "");
                        var completionPercentage = totalTasks > 0 ? (completedTasks * 100 / totalTasks) : 0;

                        <div class="kanban-card" @key="milestone.Milestone.id">
                            <div class="card-title">@milestone.Milestone.name</div>
                            <div style="height: 4px; width: 100%; background-color: var(--gl-border-color);">
                                <div style="height: 100%; width: @completionPercentage%; background-color: var(--column-ready-color);"></div>
                            </div>
                            <div class="text-end small mt-1" style="color: var(--gl-text-secondary);">
                                @completedTasks/@totalTasks
                            </div>

                            <div class="card-footer">
                                <div class="card-metadata">
                                    <div class="card-id">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="currentColor" viewBox="0 0 16 16">
                                            <path d="M14 0H2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM1 3.857C1 3.384 1.448 3 2 3h12c.552 0 1 .384 1 .857v10.286c0 .473-.448.857-1 .857H2c-.552 0-1-.384-1-.857V3.857z"/>
                                            <path d="M6.5 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-9 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-9 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"/>
                                        </svg>
                                        Milestone-@milestone.Milestone.id.ToString().Substring(0, 4)
                                    </div>
                                </div>
                                <div class="card-actions">
                                    <button type="button" style="background: transparent; border: none; color: var(--gl-text-secondary); cursor: pointer; padding: 4px;" @onclick="() => EditMilestoneDialogOnClick(milestone.Milestone)">
                                        <span class="bi bi-pencil"></span>
                                    </button>
                                    <button type="button" style="background: transparent; border: none; color: var(--gl-text-secondary); cursor: pointer; padding: 4px;" @onclick="() => DeleteMilestone(milestone.Milestone.id)">
                                        <span class="bi bi-trash"></span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="@columnClass" data-column-id="@column.Id">
                <div class="column-header">
                    <div class="column-title">
                        @column.Title
                        <div class="column-count">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor">
                                <path d="M8 9.5a1.5 1.5 0 100-3 1.5 1.5 0 000 3z"/>
                                <path fill-rule="evenodd" d="M8 0a8 8 0 100 16A8 8 0 008 0zM1.5 8a6.5 6.5 0 1113 0 6.5 6.5 0 01-13 0z"/>
                            </svg>
                            @_tasks.Count(t => t.ColumnId == column.Id)
                        </div>
                    </div>
                    <div class="column-actions">
                        <button type="button" @onclick="AddTaskDialogOpen">
                            <span class="bi bi-plus"></span>
                        </button>
                    </div>
                </div>
                <div class="cards-container"
                     dropzone="move"
                     ondragenter="event.preventDefault();"
                     ondragover="return window.kanbanInterop.handleDragOver(event, @column.Id)"
                     @ondrop="async () => await HandleDrop(column.Id)">

                    @foreach (var task in _tasks.Where(t => t.ColumnId == column.Id))
                    {
                        <div class="kanban-card"
                             draggable="true"
                             @ondragstart="() => HandleDragStart(task)"
                             @ondragend="HandleDragEnd"
                             @key="task.Task.id">
                            <div class="card-title">@task.Task.title</div>

                            @if (!string.IsNullOrEmpty(task.Task.description))
                            {
                                <p style="color: var(--gl-text-secondary); font-size: 13px; margin-bottom: 12px;">@task.Task.description</p>
                            }

                            @if (task.Task.milestone != null)
                            {
                                <div class="card-labels">
                                    <span class="card-label" style="background-color: var(--column-ready-color);">
                                        @task.Task.milestone?.name
                                    </span>
                                </div>
                            }

                            <div class="card-footer">
                                <div class="card-metadata">
                                    <div class="card-id">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="currentColor" viewBox="0 0 16 16">
                                            <path d="M14 0H2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM1 3.857C1 3.384 1.448 3 2 3h12c.552 0 1 .384 1 .857v10.286c0 .473-.448.857-1 .857H2c-.552 0-1-.384-1-.857V3.857z"/>
                                            <path d="M6.5 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-9 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-9 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"/>
                                        </svg>
                                        Task-@task.Task.id.ToString().Substring(0, 4)
                                    </div>
                                </div>
                                <div class="card-actions">
                                    <button type="button" class="card-btn" title="Move up" @onclick="() => MoveTaskUp(task)">
                                        <span class="bi bi-arrow-up"></span>
                                    </button>
                                    <button type="button" class="card-btn" title="Move down" @onclick="() => MoveTaskDown(task)">
                                        <span class="bi bi-arrow-down"></span>
                                    </button>
                                    <button type="button" class="card-btn" title="Edit" @onclick="() => EditTaskDialogOnClick(task)">
                                        <span class="bi bi-pencil"></span>
                                    </button>
                                    <button type="button" class="card-btn" title="Delete" @onclick="() => DeleteTask(task.Task.id)">
                                        <span class="bi bi-trash"></span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    }
</div>

@if (AddTaskDialogFlag)
{
    <AddTaskDialog ProjectItem="@_projectItem"
                   CurrentTaskItem="@_projectTaskItem"
                   OnClose="@AddTaskDialogClose"
                   OnItemSelected="@HandelOnAddTask"
                   DialogType="AddTaskDialog.ModalDialogType.DeleteCancel">
    </AddTaskDialog>
}

@if (AddMilestoneDialogFlag)
{
    <AddMilestoneDialog ProjectItem="@_projectItem"
                        CurrentMilestoneItem="@_projectMilestoneItem"
                        OnClose="@AddMilestoneDialogClose"
                        OnItemSelected="@HandelOnAddMilestone"
                        DialogType="AddMilestoneDialog.ModalDialogType.DeleteCancel">
    </AddMilestoneDialog>
}

@if (EditProjectDialogFlag)
{
    <EditProjectDialog ProjectItem="@_projectItem"
                       OnClose="@EditProjectDialogClose"
                       OnItemSelected="@HandelOnEditProject"
                       DialogType="EditProjectDialog.ModalDialogType.DeleteCancel">
    </EditProjectDialog>
}

@code {
    [Parameter] public Guid projectId { get; set; }

    private List<KanbanColumn> _columns =
    [
        new KanbanColumn { Id = 0, Title = "Milestones" },
        new KanbanColumn { Id = 1, Title = "To Do" },
        new KanbanColumn { Id = 2, Title = "In Progress" },
        new KanbanColumn { Id = 4, Title = "Done" }
    ];

    // Required to force dark theme to match GitLab style
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            //  // Apply dark theme to the page
            //  var doc = typeof(JSInterop.IJSInProcessRuntime).Assembly
            //      .GetType("Microsoft.JSInterop.JSRuntime")
            //      .GetMethod("InvokeJS", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);

            //  doc?.Invoke(JSRuntime, new object[] { "document.body.style.background = 'var(--gl-background-color)'", new[] { } });
            //  doc?.Invoke(JSRuntime, new object[] { "document.body.style.color = 'var(--gl-text-color)'", new[] { } });
        }
    }

    private List<KanbanTask> _tasks = [];
    private List<KanbanMilestone> _milestones = [];
    private KanbanTask? _draggedTask;

    private ProjectItem _projectItem = new();
    private ProjectTaskItem? _projectTaskItem;
    private MilestoneItem? _projectMilestoneItem;

    private bool AddTaskDialogFlag { get; set; }

    private bool AddMilestoneDialogFlag { get; set; }

    private bool EditProjectDialogFlag { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshTasks();
        await RefreshMilestones();
    }

    private async Task RefreshTasks()
    {
        _projectItem = await Client.GetProjectById(projectId) ?? new ProjectItem();

        _tasks.Clear();
        foreach (var task in _projectItem.tasks.OrderBy(t => t.columnPosition))
        {
            // Map status to column ID
            int columnId = task.status switch
            {
                "To Do" => 1,
                "In Progress" => 2,
                "Done" => 4,
                _ => 1 // Default to "To Do"
            };

            _tasks.Add(new KanbanTask()
            {
                ColumnId = columnId,
                Task = task
            });
        }

        _projectTaskItem = null;
    }

    private async Task RefreshMilestones()
    {
        _projectItem = await Client.GetProjectById(projectId) ?? new ProjectItem();

        _milestones.Clear();
        foreach (var milestone in _projectItem.milestones)
        {
            _milestones.Add(new KanbanMilestone()
            {
                Milestone = milestone
            });
        }

        _projectMilestoneItem = null;
    }

    private double _lastPosition = 0;
    private int _dropIndex = -1;
    private KanbanTask _taskBeingDroppedOn;
    private int _insertIndex = -1;
    
    private DotNetObjectReference<KanbanBoard> _dotNetRef;

// Initialize in OnAfterRender
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("kanbanInterop.setDotNetReference", _dotNetRef);
        }
    }

    [JSInvokable]
    public static Task<double> CalculatePositionValue(int columnId, int insertIndex)
    {
        // This method will be called from JS to get the position value
        // Since it's static, we need to implement this logic in the HandleDrop method instead
        return Task.FromResult(0.0);
    }

    [JSInvokable]
    public void OnInsertIndexChanged(int index)
    {
        _insertIndex = index;
        StateHasChanged();
    }
    
    [JSInvokable]
    public void UpdateInsertIndex(int insertIndex)
    {
        _insertIndex = insertIndex;
        Console.WriteLine($"Insert index updated to {_insertIndex}");
    }

    private void HandleDragStart(KanbanTask task)
    {
        _draggedTask = task;
        Console.WriteLine($"Started dragging");
    }

    private async Task HandleDragEnd()
    {
        await JSRuntime.InvokeVoidAsync("kanbanInterop.removeInsertionLine");
        Console.WriteLine("Drag ended");
    }

    private async Task HandleDragOver(DragEventArgs e, int columnId)
    {
        if (_draggedTask == null) return;

        try
        {
            Console.WriteLine($"Dragging over column {columnId}");

            // Call JS function with proper error handling
            var result = await JSRuntime.InvokeAsync<int>(
                "kanbanInterop.showInsertionLine",
                columnId, e.ClientY);

            _insertIndex = result;
            Console.WriteLine($"Got insert index: {_insertIndex}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"JS Error: {ex.Message}");
            _insertIndex = -1;
        }
    }

    // Inside your code block:

    private async Task HandleDrop(int newColumnId)
    {
        if (_draggedTask != null)
        {
            // Remove the insertion indicator
            await JSRuntime.InvokeVoidAsync("kanbanInterop.removeInsertionLine");

            var originColumnId = _draggedTask.ColumnId;
            _draggedTask.ColumnId = newColumnId;

            // Map column ID to status text
            string newStatus = newColumnId switch
            {
                1 => "To Do",
                2 => "In Progress",
                4 => "Done",
                _ => ""
            };

            _draggedTask.Task.status = newStatus;

            // Get tasks in the target column
            var columnTasks = _tasks
                .Where(t => t.ColumnId == newColumnId && t.Task.id != _draggedTask.Task.id)
                .OrderBy(t => t.Task.columnPosition)
                .ToList();

            // Calculate the new position based on the insertion index
            if (columnTasks.Count == 0)
            {
                // Empty column - use a default position
                _draggedTask.Task.columnPosition = 1000;
            }
            else if (_insertIndex <= 0)
            {
                // Insert at the beginning - position before the first task
                _draggedTask.Task.columnPosition = columnTasks.First().Task.columnPosition - 10;
            }
            else if (_insertIndex >= columnTasks.Count)
            {
                // Insert at the end - position after the last task
                _draggedTask.Task.columnPosition = columnTasks.Last().Task.columnPosition + 10;
            }
            else
            {
                // Insert between tasks - calculate the midpoint position
                var positionBefore = columnTasks[_insertIndex - 1].Task.columnPosition;
                var positionAfter = columnTasks[_insertIndex].Task.columnPosition;
                _draggedTask.Task.columnPosition = (positionBefore + positionAfter) / 2;
            }

            // Persist to database
            await Client.UpdateTask(_draggedTask.Task, _projectItem.id);

            // Reset state
            _draggedTask = null;
            _insertIndex = -1;

            // Refresh the tasks to ensure correct order
            await RefreshTasks();
        }
    }

// Add these new methods for manual reordering

// Move a task up in its column
    private async Task MoveTaskUp(KanbanTask task)
    {
        var columnTasks = _tasks
            .Where(t => t.ColumnId == task.ColumnId)
            .OrderBy(t => t.Task.columnPosition)
            .ToList();

        int index = columnTasks.IndexOf(task);
        if (index <= 0) return; // Already at the top

        var taskAbove = columnTasks[index - 1];

        // Swap positions
        (task.Task.columnPosition, taskAbove.Task.columnPosition) = (taskAbove.Task.columnPosition, task.Task.columnPosition);

        // Save both tasks
        await Client.UpdateTask(task.Task, _projectItem.id);
        await Client.UpdateTask(taskAbove.Task, _projectItem.id);

        await RefreshTasks();
    }

// Move a task down in its column
    private async Task MoveTaskDown(KanbanTask task)
    {
        var columnTasks = _tasks
            .Where(t => t.ColumnId == task.ColumnId)
            .OrderBy(t => t.Task.columnPosition)
            .ToList();

        int index = columnTasks.IndexOf(task);
        if (index >= columnTasks.Count - 1) return; // Already at the bottom

        var taskBelow = columnTasks[index + 1];

        // Swap positions
        (task.Task.columnPosition, taskBelow.Task.columnPosition) = (taskBelow.Task.columnPosition, task.Task.columnPosition);

        // Save both tasks
        await Client.UpdateTask(task.Task, _projectItem.id);
        await Client.UpdateTask(taskBelow.Task, _projectItem.id);

        await RefreshTasks();
    }

    /*
    private void HandleDragOver(DragEventArgs e, int columnId)
    {
        if (_draggedTask == null) return;

        // Ensure this is for the correct column
        if (_draggedTask.ColumnId != columnId) return;

        // Find the Y position of the drag
        var mouseY = e.ClientY;

        // Get all task cards in the column
        var columnTasks = _tasks
            .Where(t => t.ColumnId == columnId)
            .OrderBy(t => t.Task.columnPosition)
            .ToList();

        // Skip if empty column or we're dragging the only task
        if (columnTasks.Count <= 1) return;

        // Find closest task based on screen position
        // This would require JavaScript interop in a real implementation
        // For a simplified version, we can use the task index position

        Console.WriteLine($"Dragging over column {columnId}, position {mouseY}");
    }
    */

    public class KanbanColumn
    {
        public int Id { get; set; }
        public string Title { get; set; }
    }

    public class KanbanTask
    {
        public int ColumnId { get; set; }
        public ProjectTaskItem Task { get; set; }
    }

    public class KanbanMilestone
    {
        public MilestoneItem Milestone { get; set; }
    }

    private void AddTaskDialogOpen()
    {
        _projectTaskItem = null;
        AddTaskDialogFlag = true;
        StateHasChanged();
    }

    private async Task AddTaskDialogClose()
    {
        AddTaskDialogFlag = false;
        StateHasChanged();
    }

    private void EditTaskDialogOnClick(KanbanTask taskItem)
    {
        _projectTaskItem = taskItem.Task;
        AddTaskDialogFlag = true;
        StateHasChanged();
    }

    public async Task HandelOnAddTask(ProjectTaskItem task)
    {
        await RefreshTasks();
    }

    private async void DeleteTask(Guid taskId)
    {
        var res = await Client.DeleteTask(taskId);
        if (res)
        {
            await RefreshTasks();
        }
    }

    private void AddMilestoneDialogOpen()
    {
        AddMilestoneDialogFlag = true;
        StateHasChanged();
    }

    private async Task AddMilestoneDialogClose()
    {
        AddMilestoneDialogFlag = false;
        StateHasChanged();
    }

    private void EditMilestoneDialogOnClick(MilestoneItem item)
    {
        _projectMilestoneItem = item;
        AddMilestoneDialogFlag = true;
        StateHasChanged();
    }

    public async Task HandelOnAddMilestone(MilestoneItem item)
    {
        await RefreshMilestones();
    }

    public async void HandelOnEditProject(ProjectItem item)
    {
        await RefreshTasks();
        await RefreshMilestones();
    }

    private async Task EditProjectDialogClose()
    {
        EditProjectDialogFlag = false;
        StateHasChanged();
    }

    private async void DeleteMilestone(Guid milestoneId)
    {
        var res = await Client.DeleteMilestone(milestoneId);
        if (res)
        {
            await RefreshMilestones();
        }
    }

    private void EditProjectDialogOnClick()
    {
        EditProjectDialogFlag = true;
        StateHasChanged();
    }

}