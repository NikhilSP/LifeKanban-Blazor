@rendermode InteractiveServer
@inject ProjectsClient Client
@page "/kanbanboard/{projectId:guid}"
@using LifeKanban.Client
@using LifeKanban.Model

<div class="container-fluid mt-4">
    <h3>Kanban Board</h3>

    <div class="row">
        @foreach (var column in columns)
        {
            <div class="col-md-3">
                <div class="card">
                    <div class="card-header bg-light d-flex align-items-center justify-content-between px-3">
                        <h5 class="card-title mb-0">@column.Title</h5>
                        <button type="button" class="btn btn-link" @onclick="OpenTaskDialogOnClick">
                            <span class="bi bi-plus"></span>
                        </button>
                    </div>
                    <div class="card-body kanban-column"
                         dropzone="move"
                         ondragover="event.preventDefault();"
                         ondragenter="event.preventDefault();"
                         ondrop="@(() => HandleDrop(column.Id))"
                         style="min-height: 500px;">

                        @foreach (var task in tasks.Where(t => t.ColumnId == column.Id))
                        {
                            <div class="card mb-2 task-card"
                                 draggable="true"
                                 @ondragstart="() => HandleDragStart(task)"
                                 @ondragend="HandleDragEnd"
                                 @key="task.Id">
                                <div class="card-body">
                                    <h6 class="card-title">@task.Title</h6>
                                    <p class="card-text small text-muted mb-0">@task.Description</p>
                                    <div class="mt-2">
                                        <span class="badge bg-@task.Priority.ToLower()">@task.Priority</span>
                                        <small class="text-muted float-end">@task.AssignedTo</small>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>
@if (OpenAddTaskDialog)
{
    <AddTaskDialog ProjectGuid="@projectId"
                   OnClose="@OnOpenAddTaskDialogClose"
                   OnItemSelected="@HandelOnAddTask"
                   DialogType="AddTaskDialog.ModalDialogType.DeleteCancel">
    </AddTaskDialog>
}

<style>
    .kanban-column {
        background-color: #f8f9fa;
        border-radius: 4px;
        padding: 10px;
    }
    
    .task-card {
        cursor: grab;
        transition: all 0.2s ease;
    }
    
    .task-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
</style>

@code {

    public bool OpenAddTaskDialog { get; set; }

    private async Task OnOpenAddTaskDialogClose()
    {
        OpenAddTaskDialog = false;
        StateHasChanged();
    }

    private void OpenTaskDialogOnClick()
    {
        OpenAddTaskDialog = true;
        StateHasChanged();
    }

    [Parameter] public Guid projectId { get; set; }

    private List<KanbanColumn> columns = new()
    {
        new KanbanColumn { Id = 1, Title = "To Do" },
        new KanbanColumn { Id = 2, Title = "In Progress" },
        new KanbanColumn { Id = 3, Title = "Review" },
        new KanbanColumn { Id = 4, Title = "Done" }
    };

    private List<KanbanTask> tasks = new();
    private KanbanTask draggedTask;

    protected override async Task OnInitializedAsync()
    {
        await RefreshTask();
    }

    private async Task RefreshTask()
    {
        var project = await Client.GetProjectById(projectId);

        if (project is not null)
        {
            tasks.Clear();
            foreach (var task in project.tasks)
            {
                tasks.Add(new KanbanTask()
                {
                    Id = task.id,
                    Title = task.title,
                    Description = task.description,
                    ColumnId = 1,
                    Priority = "High",
                    AssignedTo = "Me"
                });
            }
        }
    }


    private void HandleDragStart(KanbanTask task)
    {
        draggedTask = task;
        Console.WriteLine($"Started dragging");
    }

    private void HandleDragEnd()
    {
        Console.WriteLine("Drag ended");
    }

    private void HandleDrop(int newColumnId)
    {
        if (draggedTask != null)
        {
            Console.WriteLine($"Dropping task ");

            draggedTask.ColumnId = newColumnId;
            draggedTask = null;
            StateHasChanged();
        }
    }

    public class KanbanColumn
    {
        public int Id { get; set; }
        public string Title { get; set; }
    }

    public class KanbanTask
    {
        public Guid Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public int ColumnId { get; set; }
        public string Priority { get; set; }
        public string AssignedTo { get; set; }
    }

    public async Task HandelOnAddTask(ProjectTaskItem task)
    {
        await RefreshTask();
    }

}

}