@page "/kanbanboard/{projectId:guid}"
@using LifeKanban.Client
@using LifeKanban.Model
@using LifeKanban.Model.ViewModels
@using LifeKanban.Services
@using LifeKanban.StateManagement
@using TaskStatus = LifeKanban.Model.ViewModels.TaskStatus
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ProjectStateService ProjectStateService
@inject KanbanService KanbanService
@inject ProjectsClient Client
@rendermode InteractiveServer
@implements IDisposable

<ProjectHeader
    Project="@_project"
    OnEditRequest="EditProjectDialogOnClick"
    OnDeleteRequest="ConfirmDeleteProject"/>

<div class="kanban-board">
    @foreach (var column in _columns.OrderBy(c => c.SortOrder))
    {
        <KanbanColumn
            Title="@column.Title"
            ColumnId="@((int)column.Type)"
            ItemCount="@GetColumnItemCount(column.Type)"
            AllowAdd="true"
            HeaderStyle="@($"border-top: 4px solid {column.BorderColor};")"
            CssClass="@column.CssClass"
            IsCollapsed="@GetColumnCollapsedState(column.Type)"
            OnAdd="HandleColumnAdd"
            OnDrop="HandleDrop"
            OnCollapseToggle="(isCollapsed) => ToggleColumnCollapse(column.Type, isCollapsed)">

            @if (column.Type == ColumnType.Milestones)
            {
                <!-- Milestones Column Content -->
                @foreach (var milestone in _milestones)
                {
                    var milestoneMetrics = GetMilestoneMetrics(milestone.Milestone.id);

                    <MilestoneCard
                        Milestone="@milestone.Milestone"
                        CompletedTasks="@milestoneMetrics.CompletedTasks"
                        TotalTasks="@milestoneMetrics.TotalTasks"
                        CompletedSubtasks="@milestoneMetrics.CompletedSubtasks"
                        TotalSubtasks="@milestoneMetrics.TotalSubtasks"
                        OnEditRequest="EditMilestoneDialogOnClick"
                        OnDeleteRequest="ConfirmDeleteMilestone"/>
                }
            }
            else
            {
                <!-- Task Columns Content -->
                @foreach (var task in _tasks.Where(t => t.ColumnType == column.Type))
                {
                    <TaskCard
                        Task="@task.Task"
                        ProjectId="@_project.id"
                        IsDraggable="true"
                        OnEditRequest="EditTaskDialogOnClick"
                        OnDeleteRequest="ConfirmDeleteTask"
                        OnDragStartEvent="HandleDragStart"
                        OnDragEndEvent="HandleDragEnd"/>
                }
            }
        </KanbanColumn>
    }
</div>

@if (AddTaskDialogFlag)
{
    <AddTaskDialog ProjectItem="@_project"
                   CurrentTaskItem="@_projectTaskItem"
                   OnClose="@AddTaskDialogClose"
                   OnItemSelected="@HandelOnAddTask"
                   DialogType="AddTaskDialog.ModalDialogType.DeleteCancel">
    </AddTaskDialog>
}

@if (AddMilestoneDialogFlag)
{
    <AddMilestoneDialog ProjectItem="@_project"
                        CurrentMilestoneItem="@_projectMilestoneItem"
                        OnClose="@AddMilestoneDialogClose"
                        OnItemSelected="@HandelOnAddMilestone"
                        DialogType="AddMilestoneDialog.ModalDialogType.DeleteCancel">
    </AddMilestoneDialog>
}

@if (EditProjectDialogFlag)
{
    <EditProjectDialog ProjectItem="@_project"
                       OnClose="@EditProjectDialogClose"
                       OnItemSelected="@HandelOnEditProject"
                       DialogType="EditProjectDialog.ModalDialogType.DeleteCancel">
    </EditProjectDialog>
}

<!-- Confirmation dialogs remain the same -->
@if (ShowDeleteProjectConfirmation)
{
    <ConfirmationDialog
        Title="Delete Project"
        Message=@GetProjectMessage()
        OnConfirm="DeleteProjectConfirmed"
        OnCancel="CancelDeleteProject"/>
}

@if (ShowDeleteMilestoneConfirmation)
{
    <ConfirmationDialog
        Title="Delete Milestone"
        Message="Are you sure you want to delete this milestone?
This action cannot be undone."
        OnConfirm="DeleteMilestoneConfirmed"
        OnCancel="CancelDeleteMilestone"/>
}

@if (ShowDeleteTaskConfirmation)
{
    <ConfirmationDialog
        Title="Delete Task"
        Message="Are you sure you want to delete this task?
This action cannot be undone."
        OnConfirm="DeleteTaskConfirmed"
        OnCancel="CancelDeleteTask"/>
}

@code {
    [Parameter] public Guid projectId { get; set; }

    // Using our strongly-typed column definitions
    private List<ColumnDefinition> _columns = BoardConfiguration.DefaultColumns;

    // Dictionary to track collapsed state of each column
    private Dictionary<ColumnType, bool> _collapsedColumns = new Dictionary<ColumnType, bool>();

    private List<KanbanTask> _tasks = [];
    private List<KanbanMilestone> _milestones = [];
    private KanbanTask? _draggedTask;

    private ProjectItem _project = new();
    private ProjectTaskItem? _projectTaskItem;
    private MilestoneItem? _projectMilestoneItem;

    private bool AddTaskDialogFlag { get; set; }
    private bool AddMilestoneDialogFlag { get; set; }
    private bool EditProjectDialogFlag { get; set; }
    private bool ShowDeleteProjectConfirmation { get; set; }
    private bool ShowDeleteMilestoneConfirmation { get; set; }
    private bool ShowDeleteTaskConfirmation { get; set; }
    private Guid? ItemToDeleteId { get; set; }

    private int _insertIndex = -1;
    private DotNetObjectReference<KanbanBoard> _dotNetRef;

    protected override async Task OnInitializedAsync()
    {
        await RefreshBoard();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("kanbanInterop.setDotNetReference", _dotNetRef);

            // Load column collapsed states
            await LoadColumnStates();

            // Force re-render if states changed
            StateHasChanged();
        }
    }

    private async Task LoadColumnStates()
    {
        try
        {
            foreach (var column in _columns)
            {
                var key = $"column_{(int)column.Type}_collapsed";
                var state = await JSRuntime.InvokeAsync<string>("localStorage.getItem", key);
                _collapsedColumns[column.Type] = state == "true";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading column states: {ex.Message}");
        }
    }

    private bool GetColumnCollapsedState(ColumnType columnType)
    {
        return _collapsedColumns.ContainsKey(columnType) && _collapsedColumns[columnType];
    }

    private int GetColumnItemCount(ColumnType columnType)
    {
        return columnType == ColumnType.Milestones
            ? _milestones.Count
            : _tasks.Count(t => t.ColumnType == columnType);
    }

    private (int TotalTasks, int CompletedTasks, int TotalSubtasks, int CompletedSubtasks)
        GetMilestoneMetrics(Guid milestoneId)
    {
        var tasks = _tasks
            .Where(t => t.Task.milestone?.id == milestoneId)
            .Select(t => t.Task)
            .ToList();

        var totalTasks = tasks.Count;
        var completedTasks = tasks.Count(t => t.status == BoardConfiguration.FromTaskStatus(TaskStatus.Done));

        int totalSubtasks = tasks.Sum(t => t.subtasks.Count);
        int completedSubtasks = tasks.Sum(t => t.subtasks.Count(s => s.isCompleted));

        return (totalTasks, completedTasks, totalSubtasks, completedSubtasks);
    }

    private async Task ToggleColumnCollapse(ColumnType columnType, bool isCollapsed)
    {
        _collapsedColumns[columnType] = isCollapsed;
        var key = $"column_{(int)columnType}_collapsed";
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", key, isCollapsed.ToString().ToLower());
    }

    private string GetProjectMessage()
    {
        return $"Are you sure you want to delete the project {_project.name}?\nThis action cannot be undone.";
    }

    private async Task RefreshBoard()
    {
        var boardData = await KanbanService.GetBoardData(projectId);
        _project = boardData.Project;
        _tasks = boardData.Tasks;
        _milestones = boardData.Milestones;
    
        _projectTaskItem = null;
        _projectMilestoneItem = null;
    }

    [JSInvokable]
    public void UpdateInsertIndex(int insertIndex)
    {
        _insertIndex = insertIndex;
        Console.WriteLine($"Insert index updated to {_insertIndex}");
    }

    private void HandleDragStart(TaskCard.TaskDragStartEventArgs args)
    {
        _draggedTask = _tasks.FirstOrDefault(t => t.Task.id == args.Task.id);
        Console.WriteLine($"Started dragging");
    }

    private async Task HandleDragEnd()
    {
        await JSRuntime.InvokeVoidAsync("kanbanInterop.removeInsertionLine");
        Console.WriteLine("Drag ended");
    }

    private async Task HandleDrop(int newColumnTypeInt)
    {
        if (_draggedTask != null)
        {
            // Remove the insertion indicator
            await JSRuntime.InvokeVoidAsync("kanbanInterop.removeInsertionLine");

            var originColumnType = _draggedTask.ColumnType;
            var newColumnType = (ColumnType)newColumnTypeInt;

            // Get tasks in the target column
            var columnTasks = _tasks
                .Where(t => t.ColumnType == newColumnType && t.Task.id != _draggedTask.Task.id)
                .OrderBy(t => t.Task.columnPosition)
                .ToList();

            // Calculate the new position based on the insertion index
            double newPosition;
            if (columnTasks.Count == 0)
            {
                // Empty column - use a default position
                newPosition = 1000;
            }
            else if (_insertIndex <= 0)
            {
                // Insert at the beginning - position before the first task
                newPosition = columnTasks.First().Task.columnPosition - 10;
            }
            else if (_insertIndex >= columnTasks.Count)
            {
                // Insert at the end - position after the last task
                newPosition = columnTasks.Last().Task.columnPosition + 10;
            }
            else
            {
                // Insert between tasks - calculate the midpoint position
                var positionBefore = columnTasks[_insertIndex - 1].Task.columnPosition;
                var positionAfter = columnTasks[_insertIndex].Task.columnPosition;
                newPosition = (positionBefore + positionAfter) / 2;
            }

            // Update the task with new column type and position
            if (newColumnType != originColumnType)
            {
                // Status change
                await KanbanService.UpdateTaskStatus(_draggedTask.Task, newColumnType, _project.id, newPosition);
            }
            else
            {
                // Position change only
                await KanbanService.UpdateTaskPosition(_draggedTask.Task, newPosition, _project.id);
            }

            // Reset state
            _draggedTask = null;
            _insertIndex = -1;

            // Refresh the board to ensure correct order
            await RefreshBoard();
        }
    }

    private void HandleColumnAdd(int columnId)
    {
        var columnType = (ColumnType)columnId;

        if (columnType == ColumnType.Milestones)
        {
            AddMilestoneDialogOpen();
        }
        else
        {
            AddTaskDialogOpen(columnType);
        }
    }

    private void AddTaskDialogOpen(ColumnType columnType)
    {
        _projectTaskItem = null;

        // Get mapped status for column
        var mappedStatus = BoardConfiguration.GetMappedStatus(columnType);

        // Create a new task with the appropriate status
        _projectTaskItem = new ProjectTaskItem
        {
            title = "",
            description = "",
            status = mappedStatus.HasValue ? BoardConfiguration.FromTaskStatus(mappedStatus.Value) : "To Do",
            subtasks = new List<SubTaskItem>()
        };

        AddTaskDialogFlag = true;
        StateHasChanged();
    }

    private async Task AddTaskDialogClose()
    {
        AddTaskDialogFlag = false;
        StateHasChanged();
    }

    private void EditTaskDialogOnClick(ProjectTaskItem taskItem)
    {
        _projectTaskItem = taskItem;
        AddTaskDialogFlag = true;
        StateHasChanged();
    }

    public async Task HandelOnAddTask(ProjectTaskItem task)
    {
        await RefreshTasks();
    }

    private void AddMilestoneDialogOpen()
    {
        AddMilestoneDialogFlag = true;
        StateHasChanged();
    }

    private async Task AddMilestoneDialogClose()
    {
        AddMilestoneDialogFlag = false;
        StateHasChanged();
    }

    private void EditMilestoneDialogOnClick(MilestoneItem item)
    {
        _projectMilestoneItem = item;
        AddMilestoneDialogFlag = true;
        StateHasChanged();
    }

    public async Task HandelOnAddMilestone(MilestoneItem item)
    {
        await RefreshMilestones();
    }

    public async Task HandelOnEditProject(ProjectItem item)
    {
        await RefreshTasks();
        await RefreshMilestones();
        ProjectStateService.NotifyStateChanged();
    }

    private async Task EditProjectDialogClose()
    {
        EditProjectDialogFlag = false;
        StateHasChanged();
    }

    private void EditProjectDialogOnClick()
    {
        EditProjectDialogFlag = true;
        StateHasChanged();
    }

    private void ConfirmDeleteProject()
    {
        ShowDeleteProjectConfirmation = true;
        StateHasChanged();
    }

    private async Task DeleteProjectConfirmed()
    {
        var res = await Client.DeleteProjects(_project.id);
        if (res)
        {
            ProjectStateService.NotifyStateChanged();
// Navigate back to home after deletion
            NavigationManager.NavigateTo("");
        }

        ShowDeleteProjectConfirmation = false;
    }

    private void CancelDeleteProject()
    {
        ShowDeleteProjectConfirmation = false;
        StateHasChanged();
    }

// Update the milestone delete method
    private void ConfirmDeleteMilestone(Guid milestoneId)
    {
        ItemToDeleteId = milestoneId;
        ShowDeleteMilestoneConfirmation = true;
        StateHasChanged();
    }

    private async Task DeleteMilestoneConfirmed()
    {
        if (ItemToDeleteId.HasValue)
        {
            var res = await Client.DeleteMilestone(ItemToDeleteId.Value);
            if (res)
            {
                await RefreshMilestones();
                await RefreshTasks();
            }
        }

        ShowDeleteMilestoneConfirmation = false;
        ItemToDeleteId = null;
    }

    private void CancelDeleteMilestone()
    {
        ShowDeleteMilestoneConfirmation = false;
        ItemToDeleteId = null;
        StateHasChanged();
    }

// Update the task delete method
    private void ConfirmDeleteTask(Guid taskId)
    {
        ItemToDeleteId = taskId;
        ShowDeleteTaskConfirmation = true;
        StateHasChanged();
    }

    private async Task DeleteTaskConfirmed()
    {
        if (ItemToDeleteId.HasValue)
        {
            var res = await Client.DeleteTask(ItemToDeleteId.Value);
            if (res)
            {
                await RefreshTasks();
            }
        }

        ShowDeleteTaskConfirmation = false;
        ItemToDeleteId = null;
    }

    private void CancelDeleteTask()
    {
        ShowDeleteTaskConfirmation = false;
        ItemToDeleteId = null;
        StateHasChanged();
    }
    private async Task RefreshTasks()
    {
        // Use the KanbanService to get the project
        var project = await Client.GetProjectById(projectId) ?? new ProjectItem();
        _project = project;
    
        // Clear existing tasks
        _tasks.Clear();
    
        // Transform project tasks to kanban tasks
        foreach (var task in project.tasks.OrderBy(t => t.columnPosition))
        {
            // Convert string status to enum
            var taskStatus = BoardConfiguration.ToTaskStatus(task.status);
        
            // Get corresponding column
            var columnType = BoardConfiguration.GetColumnForStatus(taskStatus);
        
            _tasks.Add(new KanbanTask
            {
                ColumnType = columnType,
                Task = task
            });
        }
    
        _projectTaskItem = null;
    }

    private async Task RefreshMilestones()
    {
        // Use the client to get the project (if not already loaded)
        if (_project.id == Guid.Empty)
        {
            _project = await Client.GetProjectById(projectId) ?? new ProjectItem();
        }
    
        // Clear existing milestones
        _milestones.Clear();
    
        // Transform project milestones to kanban milestones
        foreach (var milestone in _project.milestones)
        {
            _milestones.Add(new KanbanMilestone
            {
                Milestone = milestone
            });
        }
    
        _projectMilestoneItem = null;
    }
 
 
    

    public void Dispose()
    {
        _dotNetRef?.Dispose();
    }

}