@rendermode InteractiveServer
@inject ProjectsClient Client
@page "/kanbanboard/{projectId:guid}"
@using LifeKanban.Client
@using LifeKanban.Model
@using LifeKanban.StateManagement
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ProjectStateService ProjectStateService
@implements IDisposable

<ProjectHeader
    Project="@_projectItem"
    OnEditRequest="EditProjectDialogOnClick"
    OnDeleteRequest="ConfirmDeleteProject"/>

<div class="kanban-board">
    @foreach (var column in _columns)
    {
        string cssName = column.Title.ToLower().Replace(" ", "");

        <KanbanColumn
            Title="@column.Title"
            ColumnId="@column.Id"
            ItemCount="@(column.Id == 0 ? _milestones.Count : _tasks.Count(t => t.ColumnId == column.Id))"
            AllowAdd="true"
            HeaderStyle="@GetHeaderStyle(column.Id)"
            CssClass="@($"column-{cssName}")"
            IsCollapsed="@GetColumnCollapsedState(column.Id)"
            OnAdd="HandleColumnAdd"
            OnDrop="HandleDrop"
            OnCollapseToggle="(isCollapsed) => ToggleColumnCollapse(column.Id, isCollapsed)">

            @if (column.Id == 0)
            {
                <!-- Milestones Column Content -->
                @foreach (var milestone in _milestones)
                {
                    var tasks = _tasks.Where(x => x.Task.milestone?.id == milestone.Milestone.id).Select(x => x.Task).ToList();
                    var totalTasks = tasks.Count;
                    var completedTasks = tasks.Count(t => t.status == "Done");

                    // Count total subtasks
                    var milestoneTasks = _tasks.Where(t => t.Task.milestone?.id == milestone.Milestone.id).Select(x => x.Task).ToList();
                    int totalSubtasks = milestoneTasks.Sum(t => t.subtasks.Count);
                    int completedSubtasks = milestoneTasks.Sum(t => t.subtasks.Count(s => s.isCompleted));

                    <MilestoneCard
                        Milestone="@milestone.Milestone"
                        CompletedTasks="@completedTasks"
                        TotalTasks="@totalTasks"
                        CompletedSubtasks="@completedSubtasks"
                        TotalSubtasks="@totalSubtasks"
                        OnEditRequest="EditMilestoneDialogOnClick"
                        OnDeleteRequest="ConfirmDeleteMilestone"/>
                }
            }
            else
            {
                <!-- Task Columns Content -->
                @foreach (var task in _tasks.Where(t => t.ColumnId == column.Id))
                {
                    <TaskCard
                        Task="@task.Task"
                        ProjectId="@_projectItem.id"
                        IsDraggable="true"
                        OnEditRequest="EditTaskDialogOnClick"
                        OnDeleteRequest="ConfirmDeleteTask"
                        OnDragStartEvent="HandleDragStart"
                        OnDragEndEvent="HandleDragEnd"/>
                }
            }
        </KanbanColumn>
    }
</div>

@if (AddTaskDialogFlag)
{
    <AddTaskDialog ProjectItem="@_projectItem"
                   CurrentTaskItem="@_projectTaskItem"
                   OnClose="@AddTaskDialogClose"
                   OnItemSelected="@HandelOnAddTask"
                   DialogType="AddTaskDialog.ModalDialogType.DeleteCancel">
    </AddTaskDialog>
}

@if (AddMilestoneDialogFlag)
{
    <AddMilestoneDialog ProjectItem="@_projectItem"
                        CurrentMilestoneItem="@_projectMilestoneItem"
                        OnClose="@AddMilestoneDialogClose"
                        OnItemSelected="@HandelOnAddMilestone"
                        DialogType="AddMilestoneDialog.ModalDialogType.DeleteCancel">
    </AddMilestoneDialog>
}

@if (EditProjectDialogFlag)
{
    <EditProjectDialog ProjectItem="@_projectItem"
                       OnClose="@EditProjectDialogClose"
                       OnItemSelected="@HandelOnEditProject"
                       DialogType="EditProjectDialog.ModalDialogType.DeleteCancel">
    </EditProjectDialog>
}

@if (ShowDeleteProjectConfirmation)
{
    <ConfirmationDialog
        Title="Delete Project"
        Message=@GetProjectMessage()
        OnConfirm="DeleteProjectConfirmed"
        OnCancel="CancelDeleteProject"/>
}

@if (ShowDeleteMilestoneConfirmation)
{
    <ConfirmationDialog
        Title="Delete Milestone"
        Message="Are you sure you want to delete this milestone?
This action cannot be undone."
        OnConfirm="DeleteMilestoneConfirmed"
        OnCancel="CancelDeleteMilestone"/>
}

@if (ShowDeleteTaskConfirmation)
{
    <ConfirmationDialog
        Title="Delete Task"
        Message="Are you sure you want to delete this task?
This action cannot be undone."
        OnConfirm="DeleteTaskConfirmed"
        OnCancel="CancelDeleteTask"/>
}

@code {
    [Parameter] public Guid projectId { get; set; }

    private List<KanbanColumn> _columns =
    [
        new KanbanColumn { Id = 0, Title = "Milestones" },
        new KanbanColumn { Id = 1, Title = "To Do" },
        new KanbanColumn { Id = 2, Title = "In Progress" },
        new KanbanColumn { Id = 4, Title = "Done" }
    ];

// Dictionary to track collapsed state of each column
    private Dictionary<int, bool> _collapsedColumns = new Dictionary<int, bool>();

    private List<KanbanTask> _tasks = [];
    private List<KanbanMilestone> _milestones = [];
    private KanbanTask? _draggedTask;

    private ProjectItem _projectItem = new();
    private ProjectTaskItem? _projectTaskItem;
    private MilestoneItem? _projectMilestoneItem;

    private bool AddTaskDialogFlag { get; set; }
    private bool AddMilestoneDialogFlag { get; set; }
    private bool EditProjectDialogFlag { get; set; }
    private bool ShowDeleteProjectConfirmation { get; set; }
    private bool ShowDeleteMilestoneConfirmation { get; set; }
    private bool ShowDeleteTaskConfirmation { get; set; }
    private Guid? ItemToDeleteId { get; set; }

    private int _insertIndex = -1;
    private DotNetObjectReference<KanbanBoard> _dotNetRef;

    protected override async Task OnInitializedAsync()
    {
        await RefreshTasks();
        await RefreshMilestones();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await LoadColumnStates();
            await JSRuntime.InvokeVoidAsync("kanbanInterop.setDotNetReference", _dotNetRef);
        }
    }

    private async Task LoadColumnStates()
    {
        try
        {
            foreach (var column in _columns)
            {
                var key = $"column_{column.Id}_collapsed";
                var state = await JSRuntime.InvokeAsync<string>("localStorage.getItem", key);
                _collapsedColumns[column.Id] = state == "true";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading column states: {ex.Message}");
        }
    }

    private bool GetColumnCollapsedState(int columnId)
    {
        return _collapsedColumns.ContainsKey(columnId) && _collapsedColumns[columnId];
    }

    private string GetHeaderStyle(int columnId)
    {
        return columnId switch
        {
            0 => "border-top: 4px solid transparent;",
            1 => "border-top: 4px solid var(--column-todo-color);",
            2 => "border-top: 4px solid var(--column-inprogress-color);",
            4 => "border-top: 4px solid var(--column-done-color);",
            _ => ""
        };
    }

    private async Task ToggleColumnCollapse(int columnId, bool isCollapsed)
    {
        _collapsedColumns[columnId] = isCollapsed;
        var key = $"column_{columnId}_collapsed";
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", key, isCollapsed.ToString().ToLower());
    }

    private string GetProjectMessage()
    {
        return $"Are you sure you want to delete the project {_projectItem.name}?\nThis action cannot be undone.";
    }

    private async Task RefreshTasks()
    {
        _projectItem = await Client.GetProjectById(projectId) ?? new ProjectItem();

        _tasks.Clear();
        foreach (var task in _projectItem.tasks.OrderBy(t => t.columnPosition))
        {
// Map status to column ID
            int columnId = task.status switch
            {
                "To Do" => 1,
                "In Progress" => 2,
                "Done" => 4,
                _ => 1 // Default to "To Do"
            };

            _tasks.Add(new KanbanTask()
            {
                ColumnId = columnId,
                Task = task
            });
        }

        _projectTaskItem = null;
    }

    private async Task RefreshMilestones()
    {
        _projectItem = await Client.GetProjectById(projectId) ?? new ProjectItem();

        _milestones.Clear();
        foreach (var milestone in _projectItem.milestones)
        {
            _milestones.Add(new KanbanMilestone()
            {
                Milestone = milestone
            });
        }

        _projectMilestoneItem = null;
    }

    [JSInvokable]
    public void UpdateInsertIndex(int insertIndex)
    {
        _insertIndex = insertIndex;
        Console.WriteLine($"Insert index updated to {_insertIndex}");
    }

    private void HandleDragStart(TaskCard.TaskDragStartEventArgs args)
    {
        _draggedTask = _tasks.FirstOrDefault(t => t.Task.id == args.Task.id);
        Console.WriteLine($"Started dragging");
    }

    private async Task HandleDragEnd()
    {
        await JSRuntime.InvokeVoidAsync("kanbanInterop.removeInsertionLine");
        Console.WriteLine("Drag ended");
    }

    private async Task HandleDrop(int newColumnId)
    {
        if (_draggedTask != null)
        {
// Remove the insertion indicator
            await JSRuntime.InvokeVoidAsync("kanbanInterop.removeInsertionLine");

            var originColumnId = _draggedTask.ColumnId;
            _draggedTask.ColumnId = newColumnId;

// Map column ID to status text
            string newStatus = newColumnId switch
            {
                1 => "To Do",
                2 => "In Progress",
                4 => "Done",
                _ => ""
            };

            _draggedTask.Task.status = newStatus;

// Get tasks in the target column
            var columnTasks = _tasks
                .Where(t => t.ColumnId == newColumnId && t.Task.id != _draggedTask.Task.id)
                .OrderBy(t => t.Task.columnPosition)
                .ToList();

// Calculate the new position based on the insertion index
            if (columnTasks.Count == 0)
            {
// Empty column - use a default position
                _draggedTask.Task.columnPosition = 1000;
            }
            else if (_insertIndex <= 0)
            {
// Insert at the beginning - position before the first task
                _draggedTask.Task.columnPosition = columnTasks.First().Task.columnPosition - 10;
            }
            else if (_insertIndex >= columnTasks.Count)
            {
// Insert at the end - position after the last task
                _draggedTask.Task.columnPosition = columnTasks.Last().Task.columnPosition + 10;
            }
            else
            {
// Insert between tasks - calculate the midpoint position
                var positionBefore = columnTasks[_insertIndex - 1].Task.columnPosition;
                var positionAfter = columnTasks[_insertIndex].Task.columnPosition;
                _draggedTask.Task.columnPosition = (positionBefore + positionAfter) / 2;
            }

// Persist to database
            await Client.UpdateTask(_draggedTask.Task, _projectItem.id);

// Reset state
            _draggedTask = null;
            _insertIndex = -1;

// Refresh the tasks to ensure correct order
            await RefreshTasks();
        }
    }

    private void HandleColumnAdd(int columnId)
    {
        if (columnId == 0)
        {
            AddMilestoneDialogOpen();
        }
        else
        {
            AddTaskDialogOpen(columnId);
        }
    }

    private void AddTaskDialogOpen(int columnId)
    {
        _projectTaskItem = null;

// Set default status based on column ID
        string status = columnId switch
        {
            1 => "To Do",
            2 => "In Progress",
            4 => "Done",
            _ => "To Do" // Default fallback
        };

// Create a new task with the appropriate status
        _projectTaskItem = new ProjectTaskItem
        {
            title = "",
            description = "",
            status = status,
            subtasks = new List<SubTaskItem>()
        };

        AddTaskDialogFlag = true;
        StateHasChanged();
    }

    private async Task AddTaskDialogClose()
    {
        AddTaskDialogFlag = false;
        StateHasChanged();
    }

    private void EditTaskDialogOnClick(ProjectTaskItem taskItem)
    {
        _projectTaskItem = taskItem;
        AddTaskDialogFlag = true;
        StateHasChanged();
    }

    public async Task HandelOnAddTask(ProjectTaskItem task)
    {
        await RefreshTasks();
    }

    private void AddMilestoneDialogOpen()
    {
        AddMilestoneDialogFlag = true;
        StateHasChanged();
    }

    private async Task AddMilestoneDialogClose()
    {
        AddMilestoneDialogFlag = false;
        StateHasChanged();
    }

    private void EditMilestoneDialogOnClick(MilestoneItem item)
    {
        _projectMilestoneItem = item;
        AddMilestoneDialogFlag = true;
        StateHasChanged();
    }

    public async Task HandelOnAddMilestone(MilestoneItem item)
    {
        await RefreshMilestones();
    }

    public async Task HandelOnEditProject(ProjectItem item)
    {
        await RefreshTasks();
        await RefreshMilestones();
        ProjectStateService.NotifyStateChanged();
    }

    private async Task EditProjectDialogClose()
    {
        EditProjectDialogFlag = false;
        StateHasChanged();
    }

    private void EditProjectDialogOnClick()
    {
        EditProjectDialogFlag = true;
        StateHasChanged();
    }

    private void ConfirmDeleteProject()
    {
        ShowDeleteProjectConfirmation = true;
        StateHasChanged();
    }

    private async Task DeleteProjectConfirmed()
    {
        var res = await Client.DeleteProjects(_projectItem.id);
        if (res)
        {
            ProjectStateService.NotifyStateChanged();
// Navigate back to home after deletion
            NavigationManager.NavigateTo("");
        }

        ShowDeleteProjectConfirmation = false;
    }

    private void CancelDeleteProject()
    {
        ShowDeleteProjectConfirmation = false;
        StateHasChanged();
    }

// Update the milestone delete method
    private void ConfirmDeleteMilestone(Guid milestoneId)
    {
        ItemToDeleteId = milestoneId;
        ShowDeleteMilestoneConfirmation = true;
        StateHasChanged();
    }

    private async Task DeleteMilestoneConfirmed()
    {
        if (ItemToDeleteId.HasValue)
        {
            var res = await Client.DeleteMilestone(ItemToDeleteId.Value);
            if (res)
            {
                await RefreshMilestones();
                await RefreshTasks();
            }
        }

        ShowDeleteMilestoneConfirmation = false;
        ItemToDeleteId = null;
    }

    private void CancelDeleteMilestone()
    {
        ShowDeleteMilestoneConfirmation = false;
        ItemToDeleteId = null;
        StateHasChanged();
    }

// Update the task delete method
    private void ConfirmDeleteTask(Guid taskId)
    {
        ItemToDeleteId = taskId;
        ShowDeleteTaskConfirmation = true;
        StateHasChanged();
    }

    private async Task DeleteTaskConfirmed()
    {
        if (ItemToDeleteId.HasValue)
        {
            var res = await Client.DeleteTask(ItemToDeleteId.Value);
            if (res)
            {
                await RefreshTasks();
            }
        }

        ShowDeleteTaskConfirmation = false;
        ItemToDeleteId = null;
    }

    private void CancelDeleteTask()
    {
        ShowDeleteTaskConfirmation = false;
        ItemToDeleteId = null;
        StateHasChanged();
    }

    public class KanbanColumn
    {
        public int Id { get; set; }
        public string Title { get; set; }
    }

    public class KanbanTask
    {
        public int ColumnId { get; set; }
        public ProjectTaskItem Task { get; set; }
    }

    public class KanbanMilestone
    {
        public MilestoneItem Milestone { get; set; }
    }

    public void Dispose()
    {
        _dotNetRef?.Dispose();
    }

}