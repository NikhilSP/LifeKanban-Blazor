@rendermode InteractiveServer
@inject ProjectsClient Client
@page "/kanbanboard/{projectId:guid}"
@using LifeKanban.Client
@using LifeKanban.Model

<div style="display: flex; align-items: center;">
    <h3 style="margin-right: 10px; margin-bottom: 0;">@_projectItem.name</h3>
    <button type="button" class="btn btn-link text-black" @onclick="EditProjectDialogOnClick">
        <span class="bi bi-pencil"></span>
    </button>
</div>

<div class="container-fluid mt-4">
    <div class="row">
        @foreach (var column in _columns)
        {
            if (column.Title == "Milestones")
            {
                <div class="col-md-3">
                    <div class="card">
                        <div class="card-header bg-light d-flex align-items-center justify-content-between px-3">
                            <h5 class="card-title mb-0">@column.Title</h5>
                            <button type="button" class="btn btn-link" @onclick="AddMilestoneDialogOpen">
                                <span class="bi bi-plus"></span>
                            </button>
                        </div>
                        <div class="card-body kanban-column"
                             dropzone="move"
                             style="min-height: 500px;">

                            @foreach (var milestone in _milestones)
                            {
                                <div class="card mb-2 task-card"
                                     draggable="true"
                                     @key="milestone.Milestone.id">
                                    <div class="card-body">
                                        <h6 class="card-title">@milestone.Milestone.name</h6>
                                        <div class="mt-2">
                                            <button type="button" class="btn btn-link text-black" @onclick="() => DeleteMilestone(milestone.Milestone.id)">
                                                <span class="bi bi-trash"></span>
                                            </button>
                                            <button type="button" class="btn btn-link text-black" @onclick="() => EditMilestoneDialogOnClick(milestone.Milestone)">
                                                <span class="bi bi-pencil"></span>
                                            </button>
                                        </div>

                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="col-md-3">
                    <div class="card">
                        <div class="card-header bg-light d-flex align-items-center justify-content-between px-3">
                            <h5 class="card-title mb-0">@column.Title</h5>
                            <button type="button" class="btn btn-link" @onclick="AddTaskDialogOpen">
                                <span class="bi bi-plus"></span>
                            </button>
                        </div>
                        <div class="card-body kanban-column"
                             dropzone="move"
                             ondragover="event.preventDefault();"
                             ondragenter="event.preventDefault();"
                             ondrop="@(() => HandleDrop(column.Id))"
                             style="min-height: 500px;">

                            @foreach (var task in _tasks.Where(t => t.ColumnId == column.Id))
                            {
                                <div class="card mb-2 task-card"
                                     draggable="true"
                                     @ondragstart="() => HandleDragStart(task)"
                                     @ondragend="HandleDragEnd"
                                     @key="task.Task.id">
                                    <div class="card-body">
                                        <h6 class="card-title">@task.Task.title</h6>
                                        <p class="card-text small text-muted mb-0">@task.Task.description</p>
                                        <div class="mt-2">
                                            <button type="button" class="btn btn-link text-black" @onclick="() => DeleteTask(task.Task.id)">
                                                <span class="bi bi-trash"></span>
                                            </button>
                                            <button type="button" class="btn btn-link text-black" @onclick="() => EditTaskDialogOnClick(task)">
                                                <span class="bi bi-pencil"></span>
                                            </button>
                                        </div>

                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>
@if (AddTaskDialogFlag)
{
    <AddTaskDialog ProjectItem="@_projectItem"
                   CurrentTaskItem="@_projectTaskItem"
                   OnClose="@AddTaskDialogClose"
                   OnItemSelected="@HandelOnAddTask"
                   DialogType="AddTaskDialog.ModalDialogType.DeleteCancel">
    </AddTaskDialog>
}

@if (AddMilestoneDialogFlag)
{
    <AddMilestoneDialog ProjectItem="@_projectItem"
                        CurrentMilestoneItem="@_projectMilestoneItem"
                        OnClose="@AddMilestoneDialogClose"
                        OnItemSelected="@HandelOnAddMilestone"
                        DialogType="AddMilestoneDialog.ModalDialogType.DeleteCancel">
    </AddMilestoneDialog>
}

@if (EditProjectDialogFlag)
{
<EditProjectDialog  ProjectItem="@_projectItem"
                    OnClose="@EditProjectDialogClose"
                    OnItemSelected="@HandelOnEditProject"
                    DialogType="EditProjectDialog.ModalDialogType.DeleteCancel">
</EditProjectDialog>
}


<style>
    .kanban-column {
        background-color: #f8f9fa;
        border-radius: 4px;
        padding: 10px;
    }
    
    .task-card {
        cursor: grab;
        transition: all 0.2s ease;
    }
    
    .task-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
</style>

@code {

    [Parameter] public Guid projectId { get; set; }

    private List<KanbanColumn> _columns =
    [
        new KanbanColumn { Id = 0, Title = "Milestones" },
        new KanbanColumn { Id = 1, Title = "To Do" },
        new KanbanColumn { Id = 2, Title = "In Progress" },
        new KanbanColumn { Id = 4, Title = "Done" }
    ];

    private List<KanbanTask> _tasks = [];
    private List<KanbanMilestone> _milestones = [];
    private KanbanTask? _draggedTask;

    private ProjectItem _projectItem = new();
    private ProjectTaskItem? _projectTaskItem;
    private MilestoneItem? _projectMilestoneItem;

    private bool AddTaskDialogFlag { get; set; }

    private bool AddMilestoneDialogFlag { get; set; }
    
    private bool EditProjectDialogFlag { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshTasks();
        await RefreshMilestones();
    }

    private async Task RefreshTasks()
    {
        _projectItem = await Client.GetProjectById(projectId) ?? new ProjectItem();

        _tasks.Clear();
        foreach (var task in _projectItem.tasks)
        {
            _tasks.Add(new KanbanTask()
            {
                ColumnId = 1,
                Task = task
            });
        }

        _projectTaskItem = null;
    }
    
    private async Task RefreshMilestones()
    {
        _projectItem = await Client.GetProjectById(projectId) ?? new ProjectItem();

        _milestones.Clear();
        foreach (var milestone in _projectItem.milestones)
        {
            _milestones.Add(new KanbanMilestone()
            {
                Milestone = milestone
            });
        }

        _projectMilestoneItem = null;

    }

    private void HandleDragStart(KanbanTask task)
    {
        _draggedTask = task;
        Console.WriteLine($"Started dragging");
    }

    private void HandleDragEnd()
    {
        Console.WriteLine("Drag ended");
    }

    private void HandleDrop(int newColumnId)
    {
        if (_draggedTask != null)
        {
            Console.WriteLine($"Dropping task ");

            _draggedTask.ColumnId = newColumnId;
            _draggedTask = null;
            StateHasChanged();
        }
    }

    public class KanbanColumn
    {
        public int Id { get; set; }
        public string Title { get; set; }
    }

    public class KanbanTask
    {
        public int ColumnId { get; set; }
        public ProjectTaskItem Task { get; set; }
    }
    
    public class KanbanMilestone
    {
        public MilestoneItem Milestone { get; set; }
    }

    private void AddTaskDialogOpen()
    {
        _projectTaskItem = null;
        AddTaskDialogFlag = true;
        StateHasChanged();
    }

    private async Task AddTaskDialogClose()
    {
        AddTaskDialogFlag = false;
        StateHasChanged();
    }

    private void EditTaskDialogOnClick(KanbanTask taskItem)
    {
        _projectTaskItem = taskItem.Task;
        AddTaskDialogFlag = true;
        StateHasChanged();
    }

    public async Task HandelOnAddTask(ProjectTaskItem task)
    {
        await RefreshTasks();
    }

    private async void DeleteTask(Guid taskId)
    {
        var res = await Client.DeleteTask(taskId);
        if (res)
        {
            await RefreshTasks();
        }
    }

    private void AddMilestoneDialogOpen()
    {
        AddMilestoneDialogFlag = true;
        StateHasChanged();
    }

    private async Task AddMilestoneDialogClose()
    {
        AddMilestoneDialogFlag = false;
        StateHasChanged();
    }

    private void EditMilestoneDialogOnClick(MilestoneItem item)
    {
        _projectMilestoneItem = item;
        AddMilestoneDialogFlag = true;
        StateHasChanged();
    }

    private async void HandelOnAddMilestone(MilestoneItem item)
    {
        await RefreshMilestones();
    }
    
    private async void HandelOnEditProject(ProjectItem item)
    {
        await RefreshTasks();
        await RefreshMilestones();
    }
    
    private async Task EditProjectDialogClose()
    {
        EditProjectDialogFlag = false;
        StateHasChanged();
    }

    private async void DeleteMilestone(Guid milestoneId)
    {
        var res = await Client.DeleteMilestone(milestoneId);
        if (res)
        {
            await RefreshMilestones();
        }
    }
    
    private void EditProjectDialogOnClick()
    {
        EditProjectDialogFlag = true;
        StateHasChanged();
    }
}
}