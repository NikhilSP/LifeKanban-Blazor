@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@rendermode InteractiveServer

@*<button @onclick="ToggleTheme" class="theme-toggle-btn" title="@($"Switch to {(CurrentTheme == "dark" ? "claude" : "dark")} theme")">
    @if (CurrentTheme == "dark")
    {
        <span class="bi bi-brightness-high"></span>
    }
    else
    {
        <span class="bi bi-moon"></span>
    }
</button>*@

@code {
    private string CurrentTheme = "dark";
    private IJSObjectReference? _jsModule;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CurrentTheme = await JSRuntime.InvokeAsync<string>("themeManager.initTheme");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing theme: {ex.Message}");
        }
    }

    private async Task ToggleTheme()
    {
        try
        {
            CurrentTheme = await JSRuntime.InvokeAsync<string>("themeManager.toggleTheme");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling theme: {ex.Message}");
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_jsModule is not null)
        {
            await _jsModule.DisposeAsync();
        }
    }
}