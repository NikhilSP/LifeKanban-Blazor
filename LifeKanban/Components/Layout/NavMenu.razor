@using LifeKanban.Client
@using LifeKanban.Model
@using LifeKanban.StateManagement
@inject ProjectsClient Client
@inject ProjectStateService ProjectStateService
@implements IDisposable
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="sidebar-header">
    <a class="navbar-brand" href="">
        <span  aria-hidden="true"></span>
        Life Kanban
    </a>
</div>

<div class="nav-scrollable">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link d-flex align-items-center" href="" Match="NavLinkMatch.All">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white" class="me-2" viewBox="0 0 16 16">
                    <path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L2 8.207V13.5A1.5 1.5 0 0 0 3.5 15h9a1.5 1.5 0 0 0 1.5-1.5V8.207l.646.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5ZM13 7.207V13.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V7.207l5-5 5 5Z"/>
                </svg>
                <span>Home</span>
            </NavLink>
        </div>

        <div class="projects-list">
        @foreach (var project in Projects)
        {
        <div class="nav-item project-item" draggable="true" data-id="@project.id" @key="project.id">
                <NavLink class="nav-link d-flex align-items-center" href="@($"/kanbanboard/{project.id}")">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" fill="white" height="16" class="me-2" viewBox="0 0 16 16">
                        <path d="M13.5 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h11zm-11-1a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2h-11z"/>
                        <path d="M6.5 3a1 1 0 0 1 1-1h1a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1h-1a1 1 0 0 1-1-1V3zm-4 0a1 1 0 0 1 1-1h1a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1h-1a1 1 0 0 1-1-1V3zm8 0a1 1 0 0 1 1-1h1a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1h-1a1 1 0 0 1-1-1V3z"/>
                    </svg>
                    <span>@project.name</span>
                </NavLink>
            </div>
        }
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link d-flex align-items-center" href="AddProject">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white" class="me-2" viewBox="0 0 16 16">
                    <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"/>
                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
                </svg>
                <span>Add Project</span>
            </NavLink>
        </div>
    </nav>
</div>

@code
{
    List<ProjectItem> Projects = [];
    private bool _isInitialized = false;
    private DotNetObjectReference<NavMenu>? _dotNetRef;

    protected override void OnInitialized()
    {
        ProjectStateService.ProjectsChanged += OnProjectsChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("navMenuDrag.setup", _dotNetRef);
        }
    }

    [JSInvokable]
    public async Task HandleProjectDrop(string sourceId, int targetIndex)
    {
        if (!Guid.TryParse(sourceId, out Guid projectId))
            return;

        var sourceProject = Projects.FirstOrDefault(p => p.id == projectId);
        if (sourceProject == null)
            return;

        // Get projects ordered by current position
        var orderedProjects = Projects.OrderBy(p => p.position).ToList();
        
        // Get the current index of the source project
        int sourceIndex = orderedProjects.IndexOf(sourceProject);
        
        // If dropping in the same place, do nothing
        if (sourceIndex == targetIndex)
            return;

        // Update positions of affected projects
        if (sourceIndex < targetIndex)
        {
            // Moving down: items between source and target move up
            for (int i = sourceIndex; i < targetIndex; i++)
            {
                orderedProjects[i].position = orderedProjects[i + 1].position;
                await Client.UpdateProjectPosition(orderedProjects[i].id, orderedProjects[i].position);
            }
        }
        else
        {
            // Moving up: items between target and source move down
            for (int i = sourceIndex; i > targetIndex; i--)
            {
                orderedProjects[i].position = orderedProjects[i - 1].position;
                await Client.UpdateProjectPosition(orderedProjects[i].id, orderedProjects[i].position);
            }
        }
        
        // Position the dragged project at the target position
        sourceProject.position = orderedProjects[targetIndex].position;
        await Client.UpdateProjectPosition(sourceProject.id, sourceProject.position);

        // Refresh the projects list
        await RefreshProjects();
    }

    private async void OnProjectsChanged()
    {
        await RefreshProjects();
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshProjects();
        _isInitialized = true;
    }

    // In NavMenu.razor, modify the RefreshProjects method
    private async Task RefreshProjects()
    {
        Projects = await Client.GetProjects();
    
        // Ensure all projects have a position value
        bool needsPositionUpdate = false;
        for (int i = 0; i < Projects.Count; i++)
        {
            if (Projects[i].position == 0)
            {
                Projects[i].position = (i + 1) * 10; // Create spacing between positions
                await Client.UpdateProjectPosition(Projects[i].id, Projects[i].position);
                needsPositionUpdate = true;
            }
        }
    
        // Only call StateHasChanged if already initialized
        if (_isInitialized)
        {
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        ProjectStateService.ProjectsChanged -= OnProjectsChanged;
        _dotNetRef?.Dispose();
    }
}