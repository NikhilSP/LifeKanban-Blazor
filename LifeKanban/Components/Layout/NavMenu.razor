@using LifeKanban.Client
@using LifeKanban.Model
@using LifeKanban.StateManagement
@inject ProjectsClient Client
@inject ProjectStateService ProjectStateService
@implements IDisposable
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<div class="sidebar-header">
    <a class="navbar-brand" href="">
        <span  aria-hidden="true"></span>
        Life Kanban
    </a>
</div>

<div class="nav-scrollable">
    <nav class="nav flex-column">
        <div class="nav-item">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        @foreach (var project in Projects)
        {
            <div class="nav-item">
                <NavLink class="nav-link" href="@($"/kanbanboard/{project.id}")">
                    <span class="bi bi-kanban" aria-hidden="true"></span> @project.name
                </NavLink>
            </div>
        }

        <div class="nav-item">
            <NavLink class="nav-link" href="AddProject">
                <span class="bi bi-plus-circle" aria-hidden="true"></span> Add Project
            </NavLink>
        </div>
    </nav>
</div>

@code
{
    List<ProjectItem> Projects = [];
    private bool _isInitialized = false;

    protected override void OnInitialized()
    {
        ProjectStateService.ProjectsChanged += OnProjectsChanged;
    }

    private async void OnProjectsChanged()
    {
        await RefreshProjects();
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshProjects();
        _isInitialized = true;
    }

    private async Task RefreshProjects()
    {
        Projects = await Client.GetProjects();

// Only call StateHasChanged if already initialized
// This prevents issues during component initialization
        if (_isInitialized)
        {
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        ProjectStateService.ProjectsChanged -= OnProjectsChanged;
    }

    private async void DeleteProject(Guid projectId)
    {
        var res = await Client.DeleteProjects(projectId);
        if (res)
        {
            await RefreshProjects();
            NavigationManager.NavigateTo("");
        }
    }
}